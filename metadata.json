{
  "name": "Simple Sales CRM",
  "description": "A web-based CRM system for small sales teams to track and manage merchant records. Features include client tracking, adding/editing merchants, and a dashboard view. Data is stored locally.",
  "requestFramePermissions": [],
  "prompt": "These are the existing files in the app:--- START OF FILE index.tsx ---\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  throw new Error(\"Could not find root element to mount to\");\n}\n\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);--- START OF FILE metadata.json ---\n\n\n{\n  \"name\": \"Simple Sales CRM\",\n  \"description\": \"A web-based CRM system for small sales teams to track and manage merchant records. Features include client tracking, adding/editing merchants, and a dashboard view. Data is stored locally.\",\n  \"requestFramePermissions\": [],\n  \"prompt\": \"Create a new file in the project called  pages/test-supabase.js\\nPaste this code:\\n\\njs\\nCopy\\nEdit\\nimport { useEffect, useState } from 'react'\\nimport supabase from '../utils/supabase'\\n\\nexport default function TestSupabase() {\\n  const [user, setUser] = useState(null)\\n  const [loading, setLoading] = useState(true)\\n  const [error, setError] = useState(null)\\n\\n  useEffect(() => {\\n    const getUser = async () => {\\n      const {\\n        data: { user },\\n        error,\\n      } = await supabase.auth.getUser()\\n\\n      if (error) {\\n        setError(error.message)\\n      } else {\\n        setUser(user)\\n      }\\n\\n      setLoading(false)\\n    }\\n\\n    getUser()\\n  }, [])\\n\\n  if (loading) return <p>Loading...</p>\\n  if (error) return <p>Error: {error}</p>\\n\\n  return (\\n    <div>\\n      <h1>Supabase Connection Test</h1>\\n      {user ? (\\n        <div>\\n          <p>✅ Connected. You are logged in as:</p>\\n          <pre>{JSON.stringify(user, null, 2)}</pre>\\n        </div>\\n      ) : (\\n        <p>❌ Not logged in or session expired.</p>\\n      )}\\n    </div>\\n  )\\n}\"\n}--- START OF FILE index.html ---\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Sales CRM - Light Edition</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <script>\n    tailwind.config = {\n      theme: {\n        extend: {\n          fontFamily: {\n            sans: ['ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', 'Arial', '\"Noto Sans\"', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"', '\"Noto Color Emoji\"'],\n          },\n          colors: {\n            primary: { // Changed to dark gray/black palette\n              \"50\": \"#f8f8f8\",\n              \"100\": \"#eoeoeo\",\n              \"200\": \"#c7c7c7\",\n              \"300\": \"#ababab\",\n              \"400\": \"#787878\",\n              \"500\": \"#454545\", // Main primary color (dark gray)\n              \"600\": \"#3d3d3d\",\n              \"700\": \"#323232\",\n              \"800\": \"#272727\",\n              \"900\": \"#1f1f1f\", // Darker shade\n              \"950\": \"#121212\"  // Nearly black\n            },\n            gray: { // Standard grays, ensure good contrast with black text on white bg\n              50: '#f9fafb',    // Lightest gray for subtle backgrounds if needed\n              100: '#f3f4f6',   // Light gray\n              200: '#e5e7eb',   // Borders\n              300: '#d1d5db',   // Medium borders, disabled elements\n              400: '#9ca3af',   // Secondary text, icons\n              500: '#6b7280',   // Medium text\n              600: '#4b5563',   // Primary text (can be darker)\n              700: '#374151',   // Darker text\n              800: '#1f2937',   // Even darker text\n              900: '#111827',   // Near black text\n              950: '#030712',   // Blackest text\n            },\n            // Status colors - preserved for distinction as requested\n            'status-needs-follow-up': tailwind.colors.blue[500],\n            'status-emailed-for-docs': tailwind.colors.sky[500], // New status\n            'status-awaiting-callback': tailwind.colors.cyan[500], // New status\n            'status-in-progress': tailwind.colors.amber[500],\n            'status-docs-submitted': tailwind.colors.violet[500],\n            'status-ready-to-close': tailwind.colors.purple[500], // New status\n            'status-closed-funded': tailwind.colors.green[500],\n            'status-defaults-delayed': tailwind.colors.red[500],\n            \n            // Backgrounds for status badges - ensure contrast on white\n            'status-needs-follow-up-bg': tailwind.colors.blue[100],\n            'status-emailed-for-docs-bg': tailwind.colors.sky[100],\n            'status-awaiting-callback-bg': tailwind.colors.cyan[100],\n            'status-in-progress-bg': tailwind.colors.amber[100],\n            'status-docs-submitted-bg': tailwind.colors.violet[100],\n            'status-ready-to-close-bg': tailwind.colors.purple[100],\n            'status-closed-funded-bg': tailwind.colors.green[100],\n            'status-defaults-delayed-bg': tailwind.colors.red[100],\n\n             // Text colors for status badges - ensure readability\n            'status-needs-follow-up-text': tailwind.colors.blue[700],\n            'status-emailed-for-docs-text': tailwind.colors.sky[700],\n            'status-awaiting-callback-text': tailwind.colors.cyan[700],\n            'status-in-progress-text': tailwind.colors.amber[700],\n            'status-docs-submitted-text': tailwind.colors.violet[700],\n            'status-ready-to-close-text': tailwind.colors.purple[700],\n            'status-closed-funded-text': tailwind.colors.green[700],\n            'status-defaults-delayed-text': tailwind.colors.red[700],\n\n            // Enforce black & white theme\n            'background': '#ffffff', // white\n            'foreground': '#111827', // near black (gray-900)\n            'border': '#e5e7eb',     // gray-200\n            'ring': '#323232'        // primary-700 (dark gray) for focus rings\n          }\n        }\n      }\n    }\n  </script>\n  <!--\n    NOTE: For Supabase integration, this app uses environment variables:\n    - REACT_APP_SUPABASE_URL\n    - REACT_APP_SUPABASE_ANON_KEY\n    These must be configured in your deployment environment (e.g., Vercel)\n    for the application to connect to Supabase.\n  -->\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"react/\": \"https://esm.sh/react@^19.1.0/\",\n    \"react\": \"https://esm.sh/react@^19.1.0\",\n    \"react-router-dom\": \"https://esm.sh/react-router-dom@^7.6.2\",\n    \"react-dom/\": \"https://esm.sh/react-dom@^19.1.0/\",\n    \"@google/genai\": \"https://esm.sh/@google/genai\",\n    \"@supabase/supabase-js\": \"https://esm.sh/@supabase/supabase-js@^2.0.0\"\n  }\n}\n</script>\n</head>\n<body class=\"bg-background text-foreground font-sans\">\n  <div id=\"root\"></div>\n  <script type=\"module\" src=\"/index.tsx\"></script>\n</body>\n</html>--- START OF FILE types.ts ---\n\n\nimport { LEAD_STATUS_VALUES } from './constants';\n\nexport type LeadStatus = typeof LEAD_STATUS_VALUES[number];\n\nexport type DocumentStatusType = 'Bank Statements Submitted' | 'Waiting on Documents' | 'Partial Docs Received' | 'No Documents Received';\nexport type DocumentTypeType = 'Bank Statements' | 'Other' | 'Unspecified';\n\nexport interface User {\n  id: string;\n  username: string;\n}\n\nexport interface NoteEntry {\n  id: string;\n  timestamp: string; // ISO string\n  text: string;\n  agentId: string; // ID of the agent who made the note\n}\n\nexport interface Merchant {\n  id: string;\n  agentId: string;\n  creationDate: string; // YYYY-MM-DD\n  merchantName: string;\n  businessName: string;\n  mainPhoneNumber: string;\n  secondaryPhoneNumber?: string;\n  email: string;\n  monthlyRevenue: number;\n  amountLookingFor: number;\n  \n  hasDefaults: boolean;\n  numberOfDefaults?: number;\n  defaultsDescription?: string;\n\n  numberOfPositions: number;\n  positionBalances: string;\n  location: string;\n  \n  // New document status fields\n  documentStatus: DocumentStatusType;\n  documentType: DocumentTypeType;\n  documentNotes?: string;\n  // documentsSubmitted: string[]; // Removed\n\n  notes: NoteEntry[]; \n  status: LeadStatus;\n  callbackDate?: string; // YYYY-MM-DD\n  callbackTime?: string; // HH:MM\n}\n\nexport type KanbanSortKey = 'callbackDate' | 'amountLookingFor' | 'creationDate';\n\nexport interface KanbanSortConfig {\n  key: KanbanSortKey;\n  direction: 'ascending' | 'descending';\n}\n\nexport interface Filters {\n  searchTerm: string; // For merchant name, business name\n  status?: LeadStatus | 'all';\n  callbackDateStart?: string;\n  callbackDateEnd?: string;\n  fundingAmountMin?: string; \n  fundingAmountMax?: string; \n  numberOfDefaultsMin?: string; \n  numberOfDefaultsMax?: string; \n  creationDateStart?: string;\n  creationDateEnd?: string;\n  documentStatusFilter?: DocumentStatusType | 'all'; // Updated filter\n}\n\nexport interface QuickNote {\n  id: string;\n  agentId: string;\n  text: string;\n  createdAt: string; // ISO string\n  status: 'pending' | 'converting' | 'converted'; \n  convertedLeadId?: string; \n}--- START OF FILE constants.ts ---\n\n// In a real app, passwords would be hashed and stored securely, not hardcoded.\n// export const HARDCODED_USERS = [ // No longer needed, Supabase handles users\n//   { id: 'agent1', username: 'agent1', password: 'password123' },\n//   { id: 'agent2', username: 'agent2', password: 'password456' },\n// ];\n\nexport const ROUTES = {\n  LOGIN: '/login',\n  DASHBOARD: '/',\n  ADD_MERCHANT: '/add-merchant', \n  MERCHANT_DETAIL: '/merchants/:id', \n};\n\n// export const LOCAL_STORAGE_KEYS = { // No longer needed\n//   AUTH_USER: 'crm_auth_user',\n//   MERCHANTS: 'crm_merchants',\n//   QUICK_NOTES: 'crm_quick_notes', \n// };\n\nexport const LEAD_STATUS_OPTIONS = [\n  { value: 'Needs follow-up', label: 'Needs follow-up', textColor: 'text-status-needs-follow-up-text', bgColor: 'bg-status-needs-follow-up-bg' },\n  { value: 'Emailed for Docs', label: 'Emailed for Docs', textColor: 'text-status-emailed-for-docs-text', bgColor: 'bg-status-emailed-for-docs-bg' },\n  { value: 'Awaiting Callback', label: 'Awaiting Callback', textColor: 'text-status-awaiting-callback-text', bgColor: 'bg-status-awaiting-callback-bg' },\n  { value: 'In progress / Closing', label: 'In progress / Closing', textColor: 'text-status-in-progress-text', bgColor: 'bg-status-in-progress-bg' },\n  { value: 'Docs submitted', label: 'Docs submitted', textColor: 'text-status-docs-submitted-text', bgColor: 'bg-status-docs-submitted-bg' }, // This label might be confusing now, consider revising if UI depends on it for something other than badge\n  { value: 'Ready to Close', label: 'Ready to Close', textColor: 'text-status-ready-to-close-text', bgColor: 'bg-status-ready-to-close-bg' },\n  { value: 'Closed / Funded', label: 'Closed / Funded', textColor: 'text-status-closed-funded-text', bgColor: 'bg-status-closed-funded-bg' },\n  { value: 'Defaults / Delayed', label: 'Defaults / Delayed', textColor: 'text-status-defaults-delayed-text', bgColor: 'bg-status-defaults-delayed-bg' },\n] as const;\n\nexport const LEAD_STATUS_VALUES = LEAD_STATUS_OPTIONS.map(opt => opt.value);\n\nexport const DOCUMENT_STATUS_OPTIONS: { value: import('./types').DocumentStatusType; label: string }[] = [\n    { value: 'No Documents Received', label: 'No Documents Received' },\n    { value: 'Waiting on Documents', label: 'Waiting on Documents' },\n    { value: 'Partial Docs Received', label: 'Partial Docs Received' },\n    { value: 'Bank Statements Submitted', label: 'Bank Statements Submitted' },\n];\nexport const DOCUMENT_STATUS_VALUES = DOCUMENT_STATUS_OPTIONS.map(opt => opt.value);\n\n\nexport const DOCUMENT_TYPE_OPTIONS: { value: import('./types').DocumentTypeType; label: string }[] = [\n    { value: 'Bank Statements', label: 'Bank Statements' },\n    { value: 'Other', label: 'Other' },\n    { value: 'Unspecified', label: 'Unspecified' },\n];\nexport const DOCUMENT_TYPE_VALUES = DOCUMENT_TYPE_OPTIONS.map(opt => opt.value);\n\n\nexport const getStatusColorClasses = (status: typeof LEAD_STATUS_VALUES[number] | string): {textColor: string, bgColor: string} => {\n  const option = LEAD_STATUS_OPTIONS.find(opt => opt.value === status);\n  return option ? { textColor: option.textColor, bgColor: option.bgColor } : { textColor: 'text-gray-700', bgColor: 'bg-gray-200' };\n};--- START OF FILE contexts/AuthContext.tsx ---\n\nimport React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\nimport { User } from '../types';\n// import { HARDCODED_USERS, LOCAL_STORAGE_KEYS } from '../constants'; // Removed\nimport { supabase, mapSupabaseUserToAppUser } from '../lib/supabaseClient'; // Added\nimport { AuthChangeEvent, Session, User as SupabaseUser } from '@supabase/supabase-js';\n\ninterface AuthContextType {\n  currentUser: User | null;\n  login: (email: string, password_param: string) => Promise<boolean>; // username parameter changed to email\n  logout: () => void;\n  isLoading: boolean;\n  session: Session | null; // Added session state\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      setSession(session);\n      setCurrentUser(mapSupabaseUserToAppUser(session?.user ?? null));\n      setIsLoading(false);\n    };\n    getSession();\n\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event: AuthChangeEvent, session: Session | null) => {\n        setSession(session);\n        setCurrentUser(mapSupabaseUserToAppUser(session?.user ?? null));\n        setIsLoading(false);\n      }\n    );\n\n    return () => {\n      authListener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  const login = async (email: string, password_param: string): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password_param,\n      });\n      if (error) {\n        console.error('Login error:', error.message);\n        setIsLoading(false);\n        return false;\n      }\n      // onAuthStateChange will handle setting the user and session\n      // setIsLoading will be handled by onAuthStateChange listener\n      return true;\n    } catch (e) {\n      console.error('Login exception:', e);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    setIsLoading(true);\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n        console.error('Logout error: ', error.message);\n    }\n    // onAuthStateChange will clear user and session\n    // setIsLoading will be handled by onAuthStateChange listener\n  };\n\n  return (\n    <AuthContext.Provider value={{ currentUser, login, logout, isLoading, session }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};--- START OF FILE hooks/useMerchants.tsx ---\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Merchant, LeadStatus, NoteEntry, DocumentStatusType, DocumentTypeType } from '../types';\nimport { useAuth } from '../contexts/AuthContext';\n// import { LOCAL_STORAGE_KEYS, LEAD_STATUS_VALUES } from '../constants'; // Removed LOCAL_STORAGE_KEYS\nimport { LEAD_STATUS_VALUES } from '../constants';\nimport { supabase } from '../lib/supabaseClient'; // Added\n\nexport const useMerchants = () => {\n  const { currentUser } = useAuth();\n  const [merchants, setMerchants] = useState<Merchant[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchMerchants = useCallback(async () => {\n    if (!currentUser) {\n      setMerchants([]);\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('merchants')\n        .select('*')\n        .eq('agentId', currentUser.id)\n        .order('creationDate', { ascending: false });\n\n      if (supabaseError) {\n        throw supabaseError;\n      }\n      // Ensure notes is always an array, even if null from DB\n      const processedData = data.map(merchant => ({\n        ...merchant,\n        notes: merchant.notes || [], \n      }))\n      setMerchants(processedData as Merchant[]);\n    } catch (e: any) {\n      console.error(\"Failed to load merchants from Supabase\", e);\n      setError(`Failed to load merchants: ${e.message}`);\n      setMerchants([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    fetchMerchants();\n  }, [fetchMerchants]);\n\n\n  const addMerchant = useCallback(async (merchantData: Omit<Merchant, 'id' | 'agentId' | 'notes'> & { latestNotes?: string }) => {\n    if (!currentUser) {\n      setError(\"User not authenticated to add merchant.\");\n      return undefined;\n    }\n    setIsLoading(true);\n    setError(null);\n    \n    const { latestNotes, ...restOfData } = merchantData;\n    const initialNoteText = latestNotes || '';\n    const newNotes: NoteEntry[] = [];\n    if (initialNoteText) {\n      newNotes.push({\n        id: Date.now().toString(), // Temporary ID for client-side, Supabase might generate its own for sub-objects if structured\n        timestamp: new Date().toISOString(),\n        text: initialNoteText,\n        agentId: currentUser.id,\n      });\n    }\n\n    const merchantToInsert = {\n      ...restOfData,\n      agentId: currentUser.id,\n      notes: newNotes, // Ensure notes is an array\n      // Default values if not provided\n      creationDate: restOfData.creationDate || new Date().toISOString().split('T')[0],\n      merchantName: restOfData.merchantName || '',\n      businessName: restOfData.businessName || '',\n      mainPhoneNumber: restOfData.mainPhoneNumber || '',\n      email: restOfData.email || '',\n      monthlyRevenue: restOfData.monthlyRevenue || 0,\n      amountLookingFor: restOfData.amountLookingFor || 0,\n      hasDefaults: restOfData.hasDefaults || false,\n      numberOfPositions: restOfData.numberOfPositions || 0,\n      positionBalances: restOfData.positionBalances || '',\n      location: restOfData.location || '',\n      status: restOfData.status || 'Needs follow-up' as LeadStatus,\n      documentStatus: restOfData.documentStatus || 'No Documents Received',\n      documentType: restOfData.documentType || 'Bank Statements',\n      documentNotes: restOfData.documentNotes || '',\n    };\n    \n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('merchants')\n        .insert([merchantToInsert])\n        .select();\n\n      if (supabaseError) throw supabaseError;\n      \n      if (data && data.length > 0) {\n        const newMerchant = {...data[0], notes: data[0].notes || [] } as Merchant;\n        setMerchants(prev => [newMerchant, ...prev]);\n        setIsLoading(false);\n        return newMerchant;\n      }\n      setIsLoading(false);\n      return undefined;\n\n    } catch (e: any) {\n      console.error(\"Failed to save merchant to Supabase\", e);\n      setError(`Failed to save merchant: ${e.message}`);\n      setIsLoading(false);\n      return undefined;\n    }\n  }, [currentUser, setIsLoading, setError, setMerchants]);\n\n  const updateMerchant = useCallback(async (updatedMerchantData: Merchant) => {\n    if (!currentUser || updatedMerchantData.agentId !== currentUser.id) {\n      setError(\"User not authenticated or permission denied to update merchant.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n\n    const merchantToSave: Omit<Merchant, 'id'> & { id: string } = { // id must be present\n        ...updatedMerchantData,\n        notes: Array.isArray(updatedMerchantData.notes) ? updatedMerchantData.notes : [],\n        numberOfDefaults: updatedMerchantData.hasDefaults ? updatedMerchantData.numberOfDefaults : undefined,\n        defaultsDescription: updatedMerchantData.hasDefaults ? updatedMerchantData.defaultsDescription : undefined,\n        documentStatus: updatedMerchantData.documentStatus || 'No Documents Received',\n        documentType: updatedMerchantData.documentType || 'Bank Statements',\n        documentNotes: updatedMerchantData.documentNotes || '',\n    };\n    \n    // Supabase typically uses 'id' for primary key. Ensure 'id' is part of merchantToSave for the .eq('id', ...)\n    // And ensure we don't try to update 'id' itself in the payload\n    const { id, ...updatePayload } = merchantToSave;\n\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('merchants')\n        .update(updatePayload)\n        .eq('id', id)\n        .eq('agentId', currentUser.id)\n        .select();\n\n      if (supabaseError) throw supabaseError;\n\n      if (data && data.length > 0) {\n        const updatedFromServer = {...data[0], notes: data[0].notes || []} as Merchant;\n        setMerchants(prev => prev.map(m => (m.id === updatedFromServer.id ? updatedFromServer : m)));\n      }\n    } catch (e: any) {\n      console.error(\"Failed to update merchant in Supabase\", e);\n      setError(`Failed to update merchant: ${e.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser, setIsLoading, setError, setMerchants]);\n\n  const deleteMerchant = useCallback(async (merchantId: string) => {\n    if (!currentUser) {\n      setError(\"User not authenticated to delete merchant.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const { error: supabaseError } = await supabase\n        .from('merchants')\n        .delete()\n        .eq('id', merchantId)\n        .eq('agentId', currentUser.id);\n\n      if (supabaseError) throw supabaseError;\n      setMerchants(prev => prev.filter(m => m.id !== merchantId));\n    } catch (e: any) {\n      console.error(\"Failed to delete merchant from Supabase\", e);\n      setError(`Failed to delete merchant: ${e.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser, setIsLoading, setError, setMerchants]);\n\n  const getMerchantById = useCallback((merchantId: string): Merchant | undefined => {\n    if (!currentUser) return undefined;\n    return merchants.find((m) => m.id === merchantId && m.agentId === currentUser.id);\n  }, [merchants, currentUser]);\n\n  const addNoteToMerchant = useCallback(async (merchantId: string, noteText: string): Promise<Merchant | undefined> => {\n    if (!currentUser || !noteText.trim()) {\n      setError(\"User not authenticated or note text is empty.\");\n      return undefined;\n    }\n    \n    const merchant = getMerchantById(merchantId);\n    if (!merchant) {\n      setError(\"Merchant not found to add note.\");\n      return undefined;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    const newNote: NoteEntry = {\n      id: Date.now().toString() + Math.random().toString().substring(2,8), // Client-side temp ID\n      timestamp: new Date().toISOString(),\n      text: noteText.trim(),\n      agentId: currentUser.id,\n    };\n    \n    const updatedNotes = [newNote, ...(merchant.notes || [])];\n\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('merchants')\n        .update({ notes: updatedNotes })\n        .eq('id', merchantId)\n        .eq('agentId', currentUser.id)\n        .select();\n      \n      if (supabaseError) throw supabaseError;\n\n      if (data && data.length > 0) {\n        const updatedMerchant = {...data[0], notes: data[0].notes || []} as Merchant;\n        setMerchants(prev => prev.map(m => m.id === updatedMerchant.id ? updatedMerchant : m));\n        setIsLoading(false);\n        return updatedMerchant;\n      }\n      setIsLoading(false);\n      return undefined;\n    } catch (e: any) {\n      console.error(\"Failed to add note to merchant in Supabase\", e);\n      setError(`Failed to add note: ${e.message}`);\n      setIsLoading(false);\n      return undefined;\n    }\n  }, [getMerchantById, currentUser, setIsLoading, setError, setMerchants]);\n\n  return {\n    merchants,\n    addMerchant,\n    updateMerchant,\n    deleteMerchant,\n    getMerchantById,\n    addNoteToMerchant,\n    isLoading,\n    error,\n    setError,\n    fetchMerchants, // Expose fetchMerchants for potential manual refresh\n  };\n};--- START OF FILE components/ui/Button.tsx ---\n\nimport React from 'react';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'danger' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  isLoading?: boolean;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  className,\n  variant = 'primary',\n  size = 'md',\n  isLoading = false,\n  ...props\n}) => {\n  const baseStyles = 'font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition ease-in-out duration-150 flex items-center justify-center shadow-sm';\n  \n  // B&W Theme Adjustments\n  const variantStyles = {\n    primary: 'bg-primary-800 hover:bg-primary-900 text-white focus:ring-primary-700', // Dark bg, light text\n    secondary: 'bg-background hover:bg-gray-100 text-gray-800 focus:ring-primary-700 border border-gray-300', // Light bg, dark text, dark border\n    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500', // Danger remains colored\n    ghost: 'bg-transparent hover:bg-gray-100 text-primary-700 focus:ring-primary-700' // Minimal, dark text\n  };\n\n  const sizeStyles = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg',\n  };\n\n  const disabledStyles = 'disabled:opacity-60 disabled:cursor-not-allowed';\n  // Loading icon color should contrast with button background\n  const loadingIconColor = (variant === 'primary' || variant === 'danger') ? 'text-white' : 'text-primary-700';\n\n\n  return (\n    <button\n      className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${disabledStyles} ${className || ''}`}\n      disabled={isLoading || props.disabled}\n      {...props}\n    >\n      {isLoading && (\n        <svg className={`animate-spin -ml-1 mr-3 h-5 w-5 ${loadingIconColor}`} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      )}\n      {children}\n    </button>\n  );\n};--- START OF FILE components/ui/Input.tsx ---\n\nimport React from 'react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n}\n\nexport const Input: React.FC<InputProps> = ({ label, id, error, className, ...props }) => {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 mb-1\">\n          {label}\n        </label>\n      )}\n      <input\n        id={id}\n        className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm \n                   focus:outline-none focus:ring-primary-700 focus:border-primary-700 sm:text-sm\n                   bg-background border-gray-300 text-gray-900 placeholder-gray-400\n                   ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300'} \n                   ${props.disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}\n                   ${className || ''}`}\n        {...props}\n      />\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};--- START OF FILE components/ui/Select.tsx ---\n\nimport React from 'react';\n\ninterface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  label?: string;\n  error?: string;\n  options: { value: string | number | boolean; label: string }[];\n}\n\nexport const Select: React.FC<SelectProps> = ({ label, id, error, options, className, ...props }) => {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 mb-1\">\n          {label}\n        </label>\n      )}\n      <select\n        id={id}\n        className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border rounded-md shadow-sm \n                   focus:outline-none focus:ring-primary-700 focus:border-primary-700 sm:text-sm\n                   bg-background border-gray-300 text-gray-900\n                   ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300'}\n                   ${props.disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}\n                   ${className || ''}`}\n        {...props}\n      >\n        {options.map((option) => (\n          <option key={String(option.value)} value={String(option.value)} className=\"text-gray-900\">\n            {option.label}\n          </option>\n        ))}\n      </select>\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};--- START OF FILE components/ui/Textarea.tsx ---\n\nimport React from 'react';\n\ninterface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string;\n  error?: string;\n}\n\nexport const Textarea: React.FC<TextareaProps> = ({ label, id, error, className, ...props }) => {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 mb-1\">\n          {label}\n        </label>\n      )}\n      <textarea\n        id={id}\n        rows={props.rows || 3} \n        className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm \n                   focus:outline-none focus:ring-primary-700 focus:border-primary-700 sm:text-sm\n                   bg-background border-gray-300 text-gray-900 placeholder-gray-400\n                   ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300'}\n                   ${props.disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}\n                   ${className || ''}`}\n        {...props}\n      />\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};--- START OF FILE components/ui/Checkbox.tsx ---\n\nimport React from 'react';\n\ninterface CheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  error?: string;\n}\n\nexport const Checkbox: React.FC<CheckboxProps> = ({ label, id, error, className, ...props }) => {\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"flex items-center\">\n        <input\n          id={id}\n          type=\"checkbox\"\n          className={`h-4 w-4 text-primary-700 border-gray-400 rounded focus:ring-primary-700 bg-white ${className || ''}`}\n          {...props}\n        />\n        <label htmlFor={id} className=\"ml-2 block text-sm text-gray-800\"> {/* Changed text color */}\n          {label}\n        </label>\n      </div>\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};--- START OF FILE components/ui/Modal.tsx ---\n\nimport React, { ReactNode } from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: ReactNode;\n  footer?: ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, footer, size = 'lg' }) => {\n  if (!isOpen) return null;\n\n  const sizeClasses = {\n    sm: 'sm:max-w-sm',\n    md: 'sm:max-w-md',\n    lg: 'sm:max-w-lg',\n    xl: 'sm:max-w-xl',\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-75 transition-opacity duration-300 p-4\">\n      <div className={`bg-background rounded-lg shadow-xl transform transition-all w-full m-4 ${sizeClasses[size]} border border-border`}>\n        <div className=\"px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n          <div className=\"sm:flex sm:items-start w-full\">\n            <div className=\"mt-3 text-center sm:mt-0 sm:text-left w-full\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-title\">\n                {title}\n              </h3>\n              <div className=\"mt-2 text-sm text-gray-700\">\n                {children}\n              </div>\n            </div>\n          </div>\n        </div>\n        {(footer || !footer) && ( \n          <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg border-t border-gray-200\">\n            {footer ? footer : (\n              <button\n                type=\"button\"\n                className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-700 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                onClick={onClose}\n              >\n                Close\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};--- START OF FILE components/MerchantForm.tsx ---\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Merchant, LeadStatus, NoteEntry, DocumentStatusType, DocumentTypeType } from '../types';\nimport { Input } from './ui/Input';\nimport { Textarea } from './ui/Textarea';\nimport { Checkbox } from './ui/Checkbox';\nimport { Button } from './ui/Button';\nimport { Select } from './ui/Select';\nimport { ROUTES, LEAD_STATUS_OPTIONS, DOCUMENT_STATUS_OPTIONS, DOCUMENT_TYPE_OPTIONS } from '../constants';\nimport { useAuth } from '../contexts/AuthContext';\n\ninterface MerchantFormProps {\n  initialData?: Merchant; \n  onSubmit: (formData: MerchantFormData, newNoteText?: string) => void; \n}\n\nexport type MerchantFormData = Omit<Merchant, 'id' | 'agentId' | 'notes'> & {\n    newNoteText?: string; \n};\n\nconst getDefaultFormData = (): MerchantFormData => ({\n  creationDate: new Date().toISOString().split('T')[0], \n  merchantName: '',\n  businessName: '',\n  mainPhoneNumber: '',\n  secondaryPhoneNumber: '',\n  email: '',\n  monthlyRevenue: 0,\n  amountLookingFor: 0,\n  \n  hasDefaults: false, \n  numberOfDefaults: undefined,\n  defaultsDescription: undefined,\n\n  numberOfPositions: 0,\n  positionBalances: '',\n  location: '',\n  status: 'Needs follow-up' as LeadStatus, \n  callbackDate: '',\n  callbackTime: '',\n  newNoteText: '',\n\n  // New document fields\n  documentStatus: 'No Documents Received' as DocumentStatusType,\n  documentType: 'Bank Statements' as DocumentTypeType,\n  documentNotes: '',\n});\n\nexport const MerchantForm: React.FC<MerchantFormProps> = ({ initialData, onSubmit }) => {\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const isEditMode = !!initialData; \n\n  const [formData, setFormData] = useState<MerchantFormData>(() => {\n    if (initialData) { \n      const { notes, creationDate, ...restData } = initialData;\n      return {\n        ...getDefaultFormData(), \n        ...restData,             \n        creationDate: creationDate || getDefaultFormData().creationDate, \n        newNoteText: '',\n        hasDefaults: initialData.hasDefaults,\n        numberOfDefaults: initialData.numberOfDefaults,\n        defaultsDescription: initialData.defaultsDescription,\n        // Map new document fields from initialData\n        documentStatus: initialData.documentStatus || 'No Documents Received',\n        documentType: initialData.documentType || 'Bank Statements',\n        documentNotes: initialData.documentNotes || '',\n      };\n    }\n    return getDefaultFormData(); \n  });\n\n  const [existingNotes, setExistingNotes] = useState<NoteEntry[]>(initialData?.notes || []);\n  \n  const currentEditingMerchantIdRef = useRef<string | undefined>(initialData?.id);\n\n  useEffect(() => {\n    if (initialData) { \n      if (initialData.id !== currentEditingMerchantIdRef.current) {\n        const { notes, creationDate, ...restData } = initialData;\n        setFormData({\n          ...getDefaultFormData(),\n          ...restData,\n          creationDate: creationDate || getDefaultFormData().creationDate,\n          newNoteText: '',\n          hasDefaults: initialData.hasDefaults,\n          numberOfDefaults: initialData.numberOfDefaults,\n          defaultsDescription: initialData.defaultsDescription,\n          documentStatus: initialData.documentStatus || 'No Documents Received',\n          documentType: initialData.documentType || 'Bank Statements',\n          documentNotes: initialData.documentNotes || '',\n        });\n        setExistingNotes(notes || []);\n        currentEditingMerchantIdRef.current = initialData.id;\n      } else {\n        setExistingNotes(initialData.notes || []);\n        // If specific fields like status or document status changed externally, update them\n        if (initialData.status !== formData.status) {\n          setFormData(prev => ({ ...prev, status: initialData.status }));\n        }\n        if (initialData.hasDefaults !== formData.hasDefaults || \n            initialData.numberOfDefaults !== formData.numberOfDefaults ||\n            initialData.defaultsDescription !== formData.defaultsDescription ||\n            initialData.documentStatus !== formData.documentStatus ||\n            initialData.documentType !== formData.documentType ||\n            initialData.documentNotes !== formData.documentNotes\n          ) {\n            setFormData(prev => ({ \n                ...prev, \n                hasDefaults: initialData.hasDefaults,\n                numberOfDefaults: initialData.numberOfDefaults,\n                defaultsDescription: initialData.defaultsDescription,\n                documentStatus: initialData.documentStatus,\n                documentType: initialData.documentType,\n                documentNotes: initialData.documentNotes || '', \n            }));\n        }\n      }\n    } else { \n      if (currentEditingMerchantIdRef.current !== undefined) {\n        setFormData(getDefaultFormData());\n        setExistingNotes([]);\n        currentEditingMerchantIdRef.current = undefined; \n      }\n    }\n  }, [initialData, formData.status, formData.hasDefaults, formData.numberOfDefaults, formData.defaultsDescription, formData.documentStatus, formData.documentType, formData.documentNotes]); \n\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    \n    if (type === 'checkbox') {\n        const { checked } = e.target as HTMLInputElement;\n        setFormData((prev) => ({ \n            ...prev, \n            [name]: checked,\n            ...(name === 'hasDefaults' && !checked && { numberOfDefaults: undefined, defaultsDescription: undefined })\n        }));\n    } else if (type === 'number') {\n        setFormData((prev) => ({ ...prev, [name]: parseFloat(value) || 0 }));\n    } else if (name === 'numberOfDefaults') { \n        setFormData((prev) => ({ ...prev, [name]: value === '' ? undefined : parseInt(value,10) }));\n    } else {\n        setFormData((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.hasDefaults) {\n        if (formData.numberOfDefaults === undefined || formData.numberOfDefaults <=0) {\n            alert(\"Number of defaults must be a positive integer if 'Has Defaults' is selected.\");\n            return;\n        }\n        if (!formData.defaultsDescription?.trim()) {\n            alert(\"Defaults description is required if 'Has Defaults' is selected.\");\n            return;\n        }\n    }\n\n    const dataToSubmit: MerchantFormData = { \n        ...formData,   \n        numberOfDefaults: formData.hasDefaults ? formData.numberOfDefaults : undefined,\n        defaultsDescription: formData.hasDefaults ? formData.defaultsDescription : undefined,\n        documentNotes: formData.documentNotes?.trim() || '',\n    };\n        \n    onSubmit(dataToSubmit, formData.newNoteText?.trim());\n  };\n  \n  const FormSection: React.FC<{title: string, children: React.ReactNode, className?: string}> = ({title, children, className}) => (\n    <div className={`bg-background p-6 rounded-lg shadow-md mb-8 border border-border ${className}`}>\n      <h3 className=\"text-xl font-semibold text-gray-800 border-b border-gray-300 pb-3 mb-6\">{title}</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-6\">\n        {children}\n      </div>\n    </div>\n  );\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-0\">\n      \n      <FormSection title=\"Lead Information\">\n        <Input label=\"Merchant Name *\" name=\"merchantName\" id=\"merchantName\" value={formData.merchantName} onChange={handleChange} required />\n        <Input label=\"Business Name *\" name=\"businessName\" id=\"businessName\" value={formData.businessName} onChange={handleChange} required />\n        <Select label=\"Status *\" name=\"status\" id=\"status\" value={formData.status} onChange={handleChange} options={LEAD_STATUS_OPTIONS.map(opt => ({ value: opt.value, label: opt.label }))} required />\n        <Input label=\"Main Phone Number *\" name=\"mainPhoneNumber\" id=\"mainPhoneNumber\" type=\"tel\" value={formData.mainPhoneNumber} onChange={handleChange} required />\n        <Input label=\"Secondary Phone (Optional)\" name=\"secondaryPhoneNumber\" id=\"secondaryPhoneNumber\" type=\"tel\" value={formData.secondaryPhoneNumber || ''} onChange={handleChange} />\n        <Input label=\"Email *\" name=\"email\" id=\"email\" type=\"email\" value={formData.email} onChange={handleChange} required />\n        <Input label=\"Location (City, State) *\" name=\"location\" id=\"location\" value={formData.location} onChange={handleChange} required />\n        \n        {isEditMode && initialData && ( \n          <div className=\"mt-0\"> \n            <label htmlFor=\"creationDateDisplay\" className=\"block text-sm font-medium text-gray-700 mb-1\">Creation Date</label>\n            <p id=\"creationDateDisplay\" className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100 text-gray-700 sm:text-sm\">\n              {new Date(initialData.creationDate).toLocaleDateString()}\n            </p>\n          </div>\n        )}\n      </FormSection>\n\n      <FormSection title=\"Funding & Financials\">\n        <Input label=\"Amount Looking For ($) *\" name=\"amountLookingFor\" id=\"amountLookingFor\" type=\"number\" value={formData.amountLookingFor.toString()} onChange={handleChange} required />\n        <Input label=\"Monthly Revenue ($) *\" name=\"monthlyRevenue\" id=\"monthlyRevenue\" type=\"number\" value={formData.monthlyRevenue.toString()} onChange={handleChange} required />\n        <Input label=\"Number of Positions *\" name=\"numberOfPositions\" id=\"numberOfPositions\" type=\"number\" value={formData.numberOfPositions.toString()} onChange={handleChange} required />\n        <Input label=\"Position Balances *\" name=\"positionBalances\" id=\"positionBalances\" value={formData.positionBalances} onChange={handleChange} required />\n      </FormSection>\n\n      <FormSection title=\"Defaults\">\n        <div className=\"md:col-span-2 mt-2\">\n          <Checkbox label=\"Has Defaults?\" name=\"hasDefaults\" id=\"hasDefaults\" checked={formData.hasDefaults} onChange={handleChange} />\n        </div>\n        {formData.hasDefaults && (\n          <>\n            <Input label=\"Number of Defaults *\" name=\"numberOfDefaults\" id=\"numberOfDefaults\" type=\"number\" value={formData.numberOfDefaults?.toString() || ''} onChange={handleChange} required min=\"1\" step=\"1\"/>\n            <Textarea label=\"Defaults Description *\" name=\"defaultsDescription\" id=\"defaultsDescription\" value={formData.defaultsDescription || ''} onChange={handleChange} required className=\"md:col-span-2\"/>\n          </>\n        )}\n      </FormSection>\n      \n      <FormSection title=\"Callback\">\n        <Input label=\"Callback Date (Optional)\" type=\"date\" name=\"callbackDate\" id=\"callbackDate\" value={formData.callbackDate || ''} onChange={handleChange} />\n        <Input label=\"Callback Time (Optional)\" type=\"time\" name=\"callbackTime\" id=\"callbackTime\" value={formData.callbackTime || ''} onChange={handleChange} />\n      </FormSection>\n\n      <FormSection title=\"Document Management\">\n        <Select \n            label=\"Document Status *\" \n            name=\"documentStatus\" \n            id=\"documentStatus\" \n            value={formData.documentStatus} \n            onChange={handleChange} \n            options={DOCUMENT_STATUS_OPTIONS} \n            required \n        />\n        <Select \n            label=\"Primary Document Type *\" \n            name=\"documentType\" \n            id=\"documentType\" \n            value={formData.documentType} \n            onChange={handleChange} \n            options={DOCUMENT_TYPE_OPTIONS} \n            required \n        />\n        <Textarea \n            label=\"Document Notes (Optional)\" \n            name=\"documentNotes\" \n            id=\"documentNotes\" \n            value={formData.documentNotes || ''} \n            onChange={handleChange} \n            className=\"md:col-span-2\"\n            placeholder=\"e.g., Client sent 3 months, missing May. Follow-up Friday.\"\n        />\n      </FormSection>\n\n\n      <FormSection title=\"Notes\">\n        {isEditMode && existingNotes.length > 0 && (\n            <div className=\"md:col-span-2 mb-2 max-h-60 overflow-y-auto bg-gray-100 p-3 rounded border border-gray-300\">\n            <h4 className=\"text-md font-semibold text-gray-700 mb-2\">Note History:</h4>\n            {existingNotes.slice().sort((a,b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).map((note) => (\n                <div key={note.id} className=\"mb-2 p-2.5 border border-gray-200 rounded text-sm bg-white\">\n                <p className=\"text-gray-800\">{note.text}</p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                    {new Date(note.timestamp).toLocaleString()} by Agent {note.agentId === currentUser?.id ? currentUser?.username : note.agentId}\n                </p>\n                </div>\n            ))}\n            </div>\n        )}\n       <Textarea\n        label={isEditMode ? \"Add New Note (Optional)\" : \"Initial Note (Optional)\"}\n        name=\"newNoteText\"\n        id=\"newNoteText\"\n        value={formData.newNoteText || ''}\n        onChange={handleChange}\n        placeholder=\"Enter new note here...\"\n        className=\"md:col-span-2\"\n      />\n      </FormSection>\n       \n      {isEditMode && initialData && (\n        <div className=\"bg-background p-6 rounded-lg shadow-md mb-8 border border-border\">\n            <h3 className=\"text-xl font-semibold text-gray-800 border-b border-gray-300 pb-3 mb-6\">Lead Metadata</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2\">\n                 <p className=\"text-sm text-gray-700\"><span className=\"font-medium text-gray-800\">Lead ID:</span> {initialData.id}</p>\n                 <p className=\"text-sm text-gray-700\"><span className=\"font-medium text-gray-800\">Agent ID:</span> {initialData.agentId}</p>\n            </div>\n        </div>\n      )}\n      \n      <div className=\"flex justify-end space-x-3 pt-6 mt-2 pb-4\">\n        <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(ROUTES.DASHBOARD)}>\n          Cancel\n        </Button>\n        <Button type=\"submit\" variant=\"primary\">\n          {isEditMode ? \"Save Changes\" : \"Add Lead\"}\n        </Button>\n      </div>\n    </form>\n  );\n};--- START OF FILE components/Navbar.tsx ---\n\nimport React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { ROUTES } from '../constants';\nimport { Button } from './ui/Button';\n\n// CrmIcon removed as per request\n\nexport const Navbar: React.FC = () => {\n  const { currentUser, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    logout();\n    navigate(ROUTES.LOGIN);\n  };\n\n  return (\n    <nav className=\"bg-background text-foreground shadow-md\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link to={ROUTES.DASHBOARD} className=\"flex items-center space-x-2 text-xl font-bold text-primary-700 hover:text-primary-900 transition-colors\">\n            {/* CrmIcon removed */}\n            <span>Sales CRM</span>\n          </Link>\n          {currentUser && (\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600 hidden sm:inline\">Welcome, {currentUser.username}</span>\n              <Button onClick={handleLogout} variant=\"ghost\" size=\"sm\" className=\"text-primary-700 hover:bg-gray-100\">\n                Logout\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n};--- START OF FILE components/ProtectedRoute.tsx ---\n\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { ROUTES } from '../constants';\n\nexport const ProtectedRoute: React.FC = () => {\n  const { currentUser, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen bg-gray-100\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary-500\"></div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return <Navigate to={ROUTES.LOGIN} replace />;\n  }\n\n  return <Outlet />;\n};--- START OF FILE pages/LoginPage.tsx ---\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Input } from '../components/ui/Input';\nimport { Button } from '../components/ui/Button';\nimport { ROUTES } from '../constants';\n\n// Icon removed as per request\n\nexport const LoginPage: React.FC = () => {\n  const [email, setEmail] = useState(''); // Changed from username to email\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const { login, isLoading, currentUser } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (currentUser) {\n      navigate(ROUTES.DASHBOARD);\n    }\n  }, [currentUser, navigate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    // Use email for login\n    const success = await login(email, password); \n    if (success) {\n      navigate(ROUTES.DASHBOARD);\n    } else {\n      setError('Invalid email or password. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 sm:p-10 rounded-xl shadow-2xl\">\n        <div>\n          {/* Icon removed */}\n          <h2 className=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\">\n            Sign in\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Use your registered email and password.\n          </p>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && <p className=\"text-red-600 text-sm text-center bg-red-50 p-3 rounded-md\">{error}</p>}\n          <Input\n            id=\"email\" // Changed from username to email\n            label=\"Email address\" // Changed label\n            name=\"email\"\n            type=\"email\" // Changed type to email\n            autoComplete=\"email\"\n            required\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"your.email@example.com\"\n          />\n          <Input\n            id=\"password\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            required\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Password\"\n          />\n          <div>\n            <Button type=\"submit\" className=\"w-full\" isLoading={isLoading} size=\"lg\">\n              Sign in\n            </Button>\n          </div>\n        </form>\n         {/* Removed hardcoded demo accounts as authentication is now via Supabase\n         <div className=\"mt-6 text-sm text-gray-500 text-center\">\n            <p className=\"font-medium text-gray-700\">Demo accounts:</p>\n            <p>Username: <span className=\"font-semibold\">agent1</span> / Password: <span className=\"font-semibold\">password123</span></p>\n            <p>Username: <span className=\"font-semibold\">agent2</span> / Password: <span className=\"font-semibold\">password456</span></p>\n          </div>\n          */}\n          <p className=\"mt-4 text-center text-xs text-gray-500\">\n            New user? You might need to sign up via a Supabase interface or a dedicated sign-up page (not yet implemented in this app).\n          </p>\n      </div>\n    </div>\n  );\n};--- START OF FILE pages/DashboardPage.tsx ---\n\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useMerchants } from '../hooks/useMerchants';\nimport { Merchant, Filters, LeadStatus, NoteEntry, DocumentStatusType } from '../types';\nimport { Button } from '../components/ui/Button';\nimport { Input } from '../components/ui/Input';\nimport { Select as UiSelect } from '../components/ui/Select';\nimport { ROUTES, LEAD_STATUS_OPTIONS, getStatusColorClasses, DOCUMENT_STATUS_OPTIONS } from '../constants';\nimport { Modal } from '../components/ui/Modal';\nimport { Textarea } from '../components/ui/Textarea';\nimport { useAuth } from '../contexts/AuthContext';\nimport { QuickNoteInputModal } from '../components/QuickNoteInputModal'; \n\n// --- Icons ---\nconst PlusIcon: React.FC<{}> = () => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-5 h-5\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" /></svg>;\nconst CalendarDaysIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 mr-1 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5M12 16.5h.008v.008H12v-.008Z\" /></svg>;\nconst ClockIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 mr-1 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" /></svg>;\n// CurrencyDollarIcon is no longer used directly in this file for widget amounts, but kept for general availability if needed elsewhere.\nconst CurrencyDollarIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 mr-1 ${className || 'text-gray-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 11.219 12.768 11 12 11c-.768 0-1.536.219-2.121.727H12M4.5 12.75a7.5 7.5 0 0 0 15 0m-15 0a7.5 7.5 0 0 1 15 0\" /></svg>;\nconst ExclamationTriangleIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 ${className || 'text-gray-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z\" /></svg>;\nconst DocumentCheckIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 ${className || 'text-gray-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m6.75 12H9m1.5-12H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\" /></svg>;\nconst ArrowTrendingUpIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 mr-1 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 18 9 11.25l4.306 4.306a11.95 11.95 0 0 1 5.814-5.518l2.74-1.22m0 0-5.94-2.281m5.94 2.28-2.28 5.941\" /></svg>;\nconst ListBulletIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 mr-1 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.25 6.75h7.5M8.25 12h7.5m-7.5 5.25h7.5M3.75 6.75h.007v.008H3.75V6.75Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0ZM3.75 12h.007v.008H3.75V12Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm-.375 5.25h.007v.008H3.75v-.008Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z\" /></svg>;\nconst TableCellsIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 mr-1 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 6A2.25 2.25 0 0 1 6 3.75h2.25A2.25 2.25 0 0 1 10.5 6v2.25a2.25 2.25 0 0 1-2.25 2.25H6a2.25 2.25 0 0 1-2.25-2.25V6ZM3.75 15.75A2.25 2.25 0 0 1 6 13.5h2.25a2.25 2.25 0 0 1 2.25 2.25V18a2.25 2.25 0 0 1-2.25 2.25H6A2.25 2.25 0 0 1 3.75 18v-2.25ZM13.5 6a2.25 2.25 0 0 1 2.25-2.25H18A2.25 2.25 0 0 1 20.25 6v2.25A2.25 2.25 0 0 1 18 10.5h-2.25A2.25 2.25 0 0 1 13.5 8.25V6ZM13.5 15.75a2.25 2.25 0 0 1 2.25-2.25H18a2.25 2.25 0 0 1 2.25 2.25V18A2.25 2.25 0 0 1 18 20.25h-2.25A2.25 2.25 0 0 1 13.5 18v-2.25Z\" /></svg>;\nconst ChevronUpIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2.5} stroke=\"currentColor\" className={`w-3 h-3 ${className}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 15.75 7.5-7.5 7.5 7.5\" /></svg>;\nconst ChevronDownIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2.5} stroke=\"currentColor\" className={`w-3 h-3 ${className}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m19.5 8.25-7.5 7.5-7.5-7.5\" /></svg>;\nconst FunnelIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 01-.659 1.591l-5.432 5.432a2.25 2.25 0 00-.659 1.591v2.927a2.25 2.25 0 01-1.244 2.013L9.75 21v-6.572a2.25 2.25 0 00-.659-1.591L3.659 7.409A2.25 2.25 0 013 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0112 3z\" /></svg>;\nconst PencilSquareIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-5 h-5 ${className || 'text-primary-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10\" /></svg>;\n\n\ninterface QuickNoteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  merchant: Merchant;\n  onSave: (merchantId: string, noteText: string, callbackDate?: string, callbackTime?: string, status?: LeadStatus) => void;\n}\n\nconst QuickNoteModal: React.FC<QuickNoteModalProps> = ({ isOpen, onClose, merchant, onSave }) => {\n  const [noteText, setNoteText] = useState('');\n  const [callbackDate, setCallbackDate] = useState(merchant.callbackDate || '');\n  const [callbackTime, setCallbackTime] = useState(merchant.callbackTime || '');\n  const [status, setStatus] = useState<LeadStatus>(merchant.status);\n\n  useEffect(() => {\n    setNoteText('');\n    setCallbackDate(merchant.callbackDate || new Date().toISOString().split('T')[0]);\n    setCallbackTime(merchant.callbackTime || '');\n    setStatus(merchant.status);\n  }, [isOpen, merchant]);\n\n  const handleSave = () => {\n    onSave(merchant.id, noteText, callbackDate, callbackTime, status);\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} title={`Log Update for ${merchant.merchantName}`} size=\"xl\">\n      <div className=\"space-y-4\">\n        <Textarea label=\"New Note\" value={noteText} onChange={(e) => setNoteText(e.target.value)} placeholder=\"Log call details, next steps...\" rows={4}/>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          <Input label=\"Set/Update Callback Date\" type=\"date\" value={callbackDate} onChange={(e) => setCallbackDate(e.target.value)}/>\n          <Input label=\"Set/Update Callback Time\" type=\"time\" value={callbackTime} onChange={(e) => setCallbackTime(e.target.value)}/>\n        </div>\n        <UiSelect label=\"Update Status\" value={status} onChange={(e) => setStatus(e.target.value as LeadStatus)} options={LEAD_STATUS_OPTIONS.map(opt => ({ value: opt.value, label: opt.label }))}/>\n        {merchant.notes && merchant.notes.length > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-gray-300\">\n            <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">Previous Notes:</h4>\n            <div className=\"max-h-32 overflow-y-auto space-y-2 pr-1 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n              {merchant.notes.slice().sort((a,b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).map(note => (\n                <div key={note.id} className=\"text-xs p-2 bg-gray-100 rounded border border-gray-200\">\n                  <p className=\"text-gray-700\">{note.text}</p>\n                  <p className=\"text-gray-500 mt-0.5\">{new Date(note.timestamp).toLocaleString()}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"mt-6 flex justify-end space-x-2\">\n        <Button variant=\"secondary\" onClick={onClose}>Cancel</Button>\n        <Button variant=\"primary\" onClick={handleSave}>Save Update</Button>\n      </div>\n    </Modal>\n  );\n};\n\ninterface WidgetWrapperProps {\n  title: string;\n  icon?: React.ReactNode;\n  children: React.ReactNode;\n  actionButton?: React.ReactNode; \n  className?: string;\n}\n\nconst WidgetWrapper: React.FC<WidgetWrapperProps> = ({ title, icon, children, actionButton, className }) => {\n  return (\n    <div className={`bg-background p-4 rounded-lg shadow-lg flex flex-col border border-border ${className}`}>\n      <div className=\"flex justify-between items-center mb-3 pb-3 border-b border-gray-300\">\n        <div className=\"flex items-center\">\n          {icon && <span className=\"mr-2 text-primary-700\">{icon}</span>}\n          <h2 className=\"text-lg font-semibold text-gray-800\">{title}</h2>\n        </div>\n        {actionButton}\n      </div>\n      <div className=\"flex-grow overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\ninterface NextCallbacksWidgetProps { merchants: Merchant[]; onOpenNoteModal: (merchant: Merchant) => void; onViewDetails: (merchantId: string) => void; maxItems?: number; }\nconst NextCallbacksWidget: React.FC<NextCallbacksWidgetProps> = ({ merchants, onOpenNoteModal, onViewDetails, maxItems = 5 }) => {\n  const upcomingCallbacks = useMemo(() => {\n    const now = new Date();\n    return merchants\n      .filter(m => m.callbackDate)\n      .map(m => {\n        const callbackDateTime = new Date(`${m.callbackDate}T${m.callbackTime || '00:00:00'}`);\n        return { ...m, callbackDateTime, isOverdue: callbackDateTime < now && m.status !== 'Closed / Funded' && m.status !== 'Defaults / Delayed' };\n      })\n      .sort((a, b) => a.callbackDateTime.getTime() - b.callbackDateTime.getTime())\n      .slice(0, maxItems);\n  }, [merchants, maxItems]);\n\n  if (upcomingCallbacks.length === 0) return <p className=\"text-gray-500 text-sm p-4 text-center\">No upcoming callbacks.</p>;\n  return (\n    <div className=\"space-y-3\">\n      {upcomingCallbacks.map(merchant => {\n        const statusClasses = getStatusColorClasses(merchant.status);\n        return (\n          <div key={merchant.id} className={`p-3 rounded-md bg-gray-50 hover:bg-gray-100 transition-colors ${merchant.isOverdue ? 'border-l-4 border-red-500' : 'border-l-4 border-primary-700'}`}>\n            <div className=\"flex justify-between items-start\">\n              <h3 className=\"font-semibold text-primary-700 text-sm cursor-pointer hover:underline\" onClick={() => onViewDetails(merchant.id)}>{merchant.merchantName}</h3>\n              <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${statusClasses.textColor} ${statusClasses.bgColor}`}>{merchant.status}</span>\n            </div>\n            <p className=\"text-xs text-gray-500 flex items-center mt-1\">\n              <CalendarDaysIcon className=\"text-gray-500\"/> {new Date(merchant.callbackDateTime).toLocaleDateString()}\n              {merchant.callbackTime && <><ClockIcon className=\"text-gray-500 ml-1\"/> {merchant.callbackTime} </>}\n            </p>\n            {merchant.isOverdue && <p className=\"text-xs text-red-600 mt-0.5 font-medium\">Overdue</p>}\n            {merchant.notes && merchant.notes.length > 0 && (<p className=\"text-xs text-gray-400 truncate italic mt-1\">\"{merchant.notes[0].text}\"</p>)}\n            <p className=\"text-xs text-gray-700 mt-1\">Seeking: ${merchant.amountLookingFor.toLocaleString()}</p>\n            <div className=\"mt-2 text-right\">\n              <Button size=\"sm\" variant=\"ghost\" className=\"text-primary-700 hover:bg-gray-200 px-2 py-1 text-xs\" onClick={() => onOpenNoteModal(merchant)}>Log/Update</Button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface PipelineOverviewWidgetProps { merchants: Merchant[]; onUpdateMerchantStatus: (merchantId: string, status: LeadStatus) => void; onViewDetails: (merchantId: string) => void;}\nconst PipelineOverviewWidget: React.FC<PipelineOverviewWidgetProps> = ({ merchants, onUpdateMerchantStatus, onViewDetails }) => {\n  const [expandedStatuses, setExpandedStatuses] = useState<Record<string, boolean>>({});\n\n  const toggleExpand = (statusValue: string) => {\n    setExpandedStatuses(prev => ({ ...prev, [statusValue]: !prev[statusValue] }));\n  };\n\n  const merchantsByStatus = useMemo(() => {\n    const grouped: Record<string, Merchant[]> = {};\n    LEAD_STATUS_OPTIONS.forEach(opt => grouped[opt.value] = []);\n    merchants.forEach(m => {\n      if (grouped[m.status]) {\n        grouped[m.status].push(m);\n      }\n    });\n    return grouped;\n  }, [merchants]);\n\n  const activeStatusOptions = LEAD_STATUS_OPTIONS.filter(statusOption => (merchantsByStatus[statusOption.value] || []).length > 0);\n\n  if (activeStatusOptions.length === 0 && merchants.length > 0) return <p className=\"text-gray-500 text-sm p-4 text-center\">No leads in active pipeline stages.</p>;\n  if (merchants.length === 0) return <p className=\"text-gray-500 text-sm p-4 text-center\">No leads in pipeline.</p>;\n\n\n  return (\n    <div className=\"space-y-1\">\n      {LEAD_STATUS_OPTIONS.map(statusOption => {\n        const leadsInStatus = merchantsByStatus[statusOption.value] || [];\n        const count = leadsInStatus.length;\n        const isExpanded = expandedStatuses[statusOption.value];\n\n        if (count === 0) {\n          return null; \n        }\n\n        return (\n          <div key={statusOption.value} className=\"py-1\">\n            <button\n              onClick={() => toggleExpand(statusOption.value)}\n              className=\"w-full flex justify-between items-center p-2.5 rounded text-left hover:bg-gray-100 focus:outline-none focus:bg-gray-100 border border-gray-300 bg-white\"\n              aria-expanded={isExpanded}\n            >\n              <span className=\"text-sm font-semibold text-gray-800\">{statusOption.label}</span>\n              <div className=\"flex items-center\">\n                <span className=\"text-sm font-semibold text-gray-700 mr-2\">{count}</span>\n                {isExpanded ? <ChevronUpIcon className=\"text-gray-600\" /> : <ChevronDownIcon className=\"text-gray-600\" />}\n              </div>\n            </button>\n            {isExpanded && (\n              <div className=\"mt-1 pl-2 pr-1 py-1 border-l-2 border-gray-300 bg-gray-50 rounded-b-md\">\n                {leadsInStatus.length > 0 ? (\n                  leadsInStatus.map(merchant => (\n                    <div key={merchant.id} className=\"py-2 px-2 my-1 bg-white rounded shadow-sm border border-gray-200\">\n                      <div className=\"flex justify-between items-center\">\n                        <span \n                          className=\"text-sm text-primary-700 font-medium cursor-pointer hover:underline\"\n                          onClick={() => onViewDetails(merchant.id)}\n                        >\n                          {merchant.merchantName}\n                        </span>\n                        <div className=\"w-40\"> \n                            <UiSelect\n                                value={merchant.status}\n                                onChange={(e) => onUpdateMerchantStatus(merchant.id, e.target.value as LeadStatus)}\n                                options={LEAD_STATUS_OPTIONS.map(opt => ({ value: opt.value, label: opt.label }))}\n                                className=\"text-xs py-1\"\n                            />\n                        </div>\n                      </div>\n                       <p className=\"text-xs text-gray-500 mt-1\">\n                           Seeking: ${merchant.amountLookingFor.toLocaleString()}\n                           {merchant.callbackDate && ` | Callback: ${new Date(merchant.callbackDate + 'T00:00:00').toLocaleDateString()}`}\n                       </p>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-xs text-gray-500 p-2\">No leads in this status.</p>\n                )}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface HighPriorityLeadsWidgetProps { merchants: Merchant[]; onOpenNoteModal: (merchant: Merchant) => void; onViewDetails: (merchantId: string) => void; maxItems?: number; }\nconst HighPriorityLeadsWidget: React.FC<HighPriorityLeadsWidgetProps> = ({ merchants, onOpenNoteModal, onViewDetails, maxItems = 5 }) => {\n  const highValueLeads = useMemo(() => merchants.filter(m => m.status !== 'Closed / Funded' && m.status !== 'Defaults / Delayed').sort((a, b) => b.amountLookingFor - a.amountLookingFor).slice(0, maxItems), [merchants, maxItems]);\n  const leadsAtRisk = useMemo(() => merchants.filter(m => m.hasDefaults && m.status !== 'Closed / Funded').slice(0, maxItems), [merchants, maxItems]);\n\n  if (highValueLeads.length === 0 && leadsAtRisk.length === 0) return <p className=\"text-gray-500 text-sm p-4 text-center\">No high priority leads.</p>;\n  return (\n    <div className=\"space-y-4\">\n      {highValueLeads.length > 0 && (\n        <div>\n          <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">Top Value Opportunities:</h4>\n          {highValueLeads.map(merchant => {\n            const statusClasses = getStatusColorClasses(merchant.status);\n            return (\n              <div key={merchant.id} className=\"p-2.5 rounded-md bg-gray-50 hover:bg-gray-100 transition-colors mb-2 border-l-4 border-gray-400\"> \n                <div className=\"flex justify-between items-start\">\n                  <h3 className=\"font-semibold text-primary-700 text-sm cursor-pointer hover:underline\" onClick={() => onViewDetails(merchant.id)}>{merchant.merchantName}</h3>\n                  <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${statusClasses.textColor} ${statusClasses.bgColor}`}>{merchant.status}</span>\n                </div>\n                <p className=\"text-xs text-gray-700 mt-1\">Seeking: ${merchant.amountLookingFor.toLocaleString()}</p>\n                <div className=\"mt-1.5 text-right\"><Button size=\"sm\" variant=\"ghost\" className=\"text-primary-700 hover:bg-gray-200 px-2 py-1 text-xs\" onClick={() => onOpenNoteModal(merchant)}>Log/Update</Button></div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n      {leadsAtRisk.length > 0 && (\n         <div>\n          <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">Leads with Defaults:</h4>\n           {leadsAtRisk.map(merchant => {\n             const statusClasses = getStatusColorClasses(merchant.status);\n             return (\n               <div key={merchant.id} className=\"p-2.5 rounded-md bg-gray-100 hover:bg-gray-200 transition-colors mb-2 border-l-4 border-gray-500\"> \n                <div className=\"flex justify-between items-start\">\n                   <h3 className=\"font-semibold text-primary-800 text-sm cursor-pointer hover:underline\" onClick={() => onViewDetails(merchant.id)}>{merchant.merchantName}</h3>\n                   <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${statusClasses.textColor} ${statusClasses.bgColor}`}>{merchant.status}</span>\n                </div>\n                <p className=\"text-xs text-gray-700 flex items-center mt-1\"><ExclamationTriangleIcon className=\"text-gray-600 mr-1\"/> Has {merchant.numberOfDefaults || ''} Default(s)</p>\n                {merchant.defaultsDescription && <p className=\"text-xs text-gray-600 italic mt-0.5\">\"{merchant.defaultsDescription}\"</p>}\n                <p className=\"text-xs text-gray-700 mt-1\">Seeking: ${merchant.amountLookingFor.toLocaleString()}</p>\n                <div className=\"mt-1.5 text-right\"><Button size=\"sm\" variant=\"ghost\" className=\"text-primary-700 hover:bg-gray-200 px-2 py-1 text-xs\" onClick={() => onOpenNoteModal(merchant)}>Log/Update</Button></div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface LeadsByDocStatusWidgetProps { merchants: Merchant[]; onOpenNoteModal: (merchant: Merchant) => void; onViewDetails: (merchantId: string) => void; maxItems?: number; }\nconst LeadsByDocStatusWidget: React.FC<LeadsByDocStatusWidgetProps> = ({ merchants, onOpenNoteModal, onViewDetails, maxItems = 5 }) => {\n  const leadsWithRelevantDocs = useMemo(() => \n    merchants.filter(m => \n        (m.documentStatus === 'Bank Statements Submitted' || m.documentStatus === 'Partial Docs Received') \n        && m.status !== 'Closed / Funded'\n    ).slice(0, maxItems), \n  [merchants, maxItems]);\n\n  if (leadsWithRelevantDocs.length === 0) return <p className=\"text-gray-500 text-sm p-4 text-center\">No leads with recently submitted/partial docs.</p>;\n  \n  return (\n     <div className=\"space-y-3\">\n      {leadsWithRelevantDocs.map(merchant => {\n        const statusClasses = getStatusColorClasses(merchant.status);\n        return (\n          <div key={merchant.id} className=\"p-3 rounded-md bg-gray-50 hover:bg-gray-100 transition-colors border-l-4 border-gray-400\"> \n            <div className=\"flex justify-between items-start\">\n              <h3 className=\"font-semibold text-primary-700 text-sm cursor-pointer hover:underline\" onClick={() => onViewDetails(merchant.id)}>{merchant.merchantName}</h3>\n              <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${statusClasses.textColor} ${statusClasses.bgColor}`}>{merchant.status}</span>\n            </div>\n            <p className=\"text-xs text-gray-700 flex items-center mt-1\"><DocumentCheckIcon className=\"text-gray-600 mr-1\" /> {merchant.documentStatus} ({merchant.documentType})</p>\n            {merchant.documentNotes && <p className=\"text-xs text-gray-500 italic mt-0.5 truncate\">Notes: \"{merchant.documentNotes}\"</p>}\n            <p className=\"text-xs text-gray-700 mt-1\">Seeking: ${merchant.amountLookingFor.toLocaleString()}</p>\n            <div className=\"mt-2 text-right\"><Button size=\"sm\" variant=\"ghost\" className=\"text-primary-700 hover:bg-gray-200 px-2 py-1 text-xs\" onClick={() => onOpenNoteModal(merchant)}>Log/Update</Button></div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ntype SortableLeadTableColumn = 'merchantName' | 'businessName' | 'callbackDate' | 'status' | 'amountLookingFor' | 'monthlyRevenue' | 'location' | 'documentStatus' | 'hasDefaults' | 'creationDate';\ninterface TableSortConfig { key: SortableLeadTableColumn; direction: 'ascending' | 'descending'; }\ninterface LeadTableProps { merchants: Merchant[]; onRowClick: (merchantId: string) => void; }\nconst LeadTable: React.FC<LeadTableProps> = ({ merchants, onRowClick }) => {\n  const [tableSearchTerm, setTableSearchTerm] = useState('');\n  const [sortConfig, setSortConfig] = useState<TableSortConfig | null>({ key: 'creationDate', direction: 'descending' });\n\n  const requestSort = (key: SortableLeadTableColumn) => {\n    let direction: 'ascending' | 'descending' = 'ascending';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending';\n    setSortConfig({ key, direction });\n  };\n\n  const filteredAndSortedMerchants = useMemo(() => {\n    let sortableItems = [...merchants];\n    if (tableSearchTerm) {\n      const lower = tableSearchTerm.toLowerCase();\n      sortableItems = sortableItems.filter(m => m.merchantName.toLowerCase().includes(lower) || m.businessName.toLowerCase().includes(lower) || m.email.toLowerCase().includes(lower) || m.status.toLowerCase().includes(lower) || m.documentStatus.toLowerCase().includes(lower) || m.location.toLowerCase().includes(lower));\n    }\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        let valA = a[sortConfig.key as keyof Merchant];\n        let valB = b[sortConfig.key as keyof Merchant];\n        \n        if (sortConfig.key === 'callbackDate' || sortConfig.key === 'creationDate') {\n          valA = a[sortConfig.key as 'callbackDate' | 'creationDate'] ? new Date(a[sortConfig.key as 'callbackDate' | 'creationDate']!).getTime() : 0;\n          valB = b[sortConfig.key as 'callbackDate' | 'creationDate'] ? new Date(b[sortConfig.key as 'callbackDate' | 'creationDate']!).getTime() : 0;\n          if (sortConfig.direction === 'ascending') { if (valA === 0 && valB !== 0) return 1; if (valA !== 0 && valB === 0) return -1; } \n          else { if (valA === 0 && valB !== 0) return 1; if (valA !== 0 && valB === 0) return -1; }\n        } else if (sortConfig.key === 'amountLookingFor' || sortConfig.key === 'monthlyRevenue') {\n          valA = a[sortConfig.key as 'amountLookingFor' | 'monthlyRevenue'] as number;\n          valB = b[sortConfig.key as 'amountLookingFor' | 'monthlyRevenue'] as number;\n        } else if (typeof valA === 'string' && typeof valB === 'string') { \n            valA = valA.toLowerCase(); \n            valB = valB.toLowerCase(); \n        } else if (sortConfig.key === 'hasDefaults') { \n            valA = a.hasDefaults ? 1 : 0; \n            valB = b.hasDefaults ? 1 : 0;\n        }\n        // documentStatus and location are strings, handled by string comparison\n\n        if (valA < valB) return sortConfig.direction === 'ascending' ? -1 : 1;\n        if (valA > valB) return sortConfig.direction === 'ascending' ? 1 : -1;\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [merchants, tableSearchTerm, sortConfig]);\n  \n  const SortableHeader: React.FC<{ columnKey: SortableLeadTableColumn; title: string; textAlign?: 'left' | 'center' | 'right' }> = ({ columnKey, title, textAlign = 'left' }) => {\n    let alignmentClass = 'text-left';\n    if (textAlign === 'center') alignmentClass = 'text-center';\n    else if (textAlign === 'right') alignmentClass = 'text-right';\n  \n    let flexAlignmentClass = 'justify-start';\n    if (textAlign === 'center') flexAlignmentClass = 'justify-center';\n    else if (textAlign === 'right') flexAlignmentClass = 'justify-end';\n\n    return (\n        <th scope=\"col\" className={`px-4 py-3 ${alignmentClass} text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100`} onClick={() => requestSort(columnKey)}>\n            <div className={`flex items-center ${flexAlignmentClass}`}>\n            {title}\n            {sortConfig && sortConfig.key === columnKey && (\n                <span className=\"ml-1\">{sortConfig.direction === 'ascending' ? <ChevronUpIcon /> : <ChevronDownIcon />}</span>\n            )}\n            </div>\n        </th>\n    );\n  };\n\n  return (\n    <WidgetWrapper title=\"All Leads Grid\" icon={<TableCellsIcon className=\"text-gray-700\"/>} className=\"mt-8\">\n      <div className=\"mb-4\"><Input placeholder=\"Search in table...\" value={tableSearchTerm} onChange={(e) => setTableSearchTerm(e.target.value)} className=\"w-full sm:w-1/2 lg:w-1/3\"/></div>\n      <div className=\"overflow-x-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n        <table className=\"min-w-full divide-y divide-gray-300\">\n          <thead className=\"bg-gray-100\"><tr>\n              <SortableHeader columnKey=\"merchantName\" title=\"Merchant Name\" />\n              <SortableHeader columnKey=\"businessName\" title=\"Business Name\" />\n              <SortableHeader columnKey=\"location\" title=\"Location\" />\n              <SortableHeader columnKey=\"callbackDate\" title=\"Callback\" />\n              <SortableHeader columnKey=\"status\" title=\"Status\" />\n              <SortableHeader columnKey=\"amountLookingFor\" title=\"Amt. Looking For ($)\" textAlign=\"right\" />\n              <SortableHeader columnKey=\"monthlyRevenue\" title=\"Monthly Rev ($)\" textAlign=\"right\" />\n              <SortableHeader columnKey=\"documentStatus\" title=\"Doc Status\" />\n              <SortableHeader columnKey=\"hasDefaults\" title=\"Defaults\" textAlign=\"center\" />\n              <SortableHeader columnKey=\"creationDate\" title=\"Created\" textAlign=\"right\" />\n          </tr></thead>\n          <tbody className=\"bg-background divide-y divide-gray-200\">\n            {filteredAndSortedMerchants.map((merchant) => {\n              const statusClasses = getStatusColorClasses(merchant.status);\n              return (\n                <tr key={merchant.id} onClick={() => onRowClick(merchant.id)} className=\"hover:bg-gray-50 cursor-pointer\">\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-primary-700 hover:underline\">{merchant.merchantName}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600\">{merchant.businessName}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600\">{merchant.location}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600\">{merchant.callbackDate ? new Date(merchant.callbackDate + 'T00:00:00').toLocaleDateString() : '-'}{merchant.callbackTime ? ` ${merchant.callbackTime}`: ''}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm\"><span className={`px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClasses.bgColor} ${statusClasses.textColor}`}>{merchant.status}</span></td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600 text-right\">${merchant.amountLookingFor.toLocaleString()}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600 text-right\">${merchant.monthlyRevenue.toLocaleString()}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600\">{merchant.documentStatus}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-center\">{merchant.hasDefaults ? <ExclamationTriangleIcon className=\"text-gray-600 inline-block\" /> : <span className=\"text-gray-500\">No</span>}</td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600 text-right\">{new Date(merchant.creationDate).toLocaleDateString()}</td>\n                </tr>);})}\n          </tbody>\n        </table>\n      </div>\n      {filteredAndSortedMerchants.length === 0 && (<p className=\"text-center text-gray-500 py-4\">No leads match criteria.</p>)}\n    </WidgetWrapper>\n  );\n};\n\nexport const DashboardPage: React.FC = () => {\n  const { merchants, isLoading, error, updateMerchant } = useMerchants();\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [filters, setFilters] = useState<Filters>({ \n    searchTerm: '', \n    status: 'all', \n    callbackDateStart: '', callbackDateEnd: '',\n    fundingAmountMin: '', fundingAmountMax: '',\n    numberOfDefaultsMin: '', numberOfDefaultsMax: '',\n    creationDateStart: '', creationDateEnd: '',\n    documentStatusFilter: 'all',\n  });\n  \n  const [isLogUpdateModalOpen, setIsLogUpdateModalOpen] = useState(false); \n  const [selectedMerchantForLog, setSelectedMerchantForLog] = useState<Merchant | null>(null); \n  const [showFilters, setShowFilters] = useState(false); \n  const [isQuickNoteModalOpen, setIsQuickNoteModalOpen] = useState(false); \n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFilters(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const clearFilters = () => {\n    setFilters({\n      searchTerm: '', status: 'all', callbackDateStart: '', callbackDateEnd: '',\n      fundingAmountMin: '', fundingAmountMax: '', numberOfDefaultsMin: '', numberOfDefaultsMax: '',\n      creationDateStart: '', creationDateEnd: '', documentStatusFilter: 'all'\n    });\n  };\n\n  const globallyFilteredMerchants = useMemo(() => {\n    return merchants.filter(merchant => {\n      const searchTermLower = filters.searchTerm.toLowerCase();\n      const matchesSearch = !filters.searchTerm ||\n        merchant.merchantName.toLowerCase().includes(searchTermLower) ||\n        merchant.businessName.toLowerCase().includes(searchTermLower) ||\n        merchant.email.toLowerCase().includes(searchTermLower) ||\n        merchant.location.toLowerCase().includes(searchTermLower);\n\n      const matchesStatus = filters.status === 'all' || merchant.status === filters.status;\n\n      const matchesCallbackDate = (!filters.callbackDateStart || (merchant.callbackDate && merchant.callbackDate >= filters.callbackDateStart)) &&\n                                  (!filters.callbackDateEnd || (merchant.callbackDate && merchant.callbackDate <= filters.callbackDateEnd));\n      \n      const fundingMin = parseFloat(filters.fundingAmountMin || '0');\n      const fundingMax = parseFloat(filters.fundingAmountMax || Number.MAX_SAFE_INTEGER.toString());\n      const matchesFunding = merchant.amountLookingFor >= fundingMin && merchant.amountLookingFor <= fundingMax;\n\n      const defaultsMin = parseInt(filters.numberOfDefaultsMin || '0', 10);\n      const defaultsMax = parseInt(filters.numberOfDefaultsMax || Number.MAX_SAFE_INTEGER.toString(), 10);\n      const matchesDefaults = (!merchant.hasDefaults && defaultsMin === 0 && (filters.numberOfDefaultsMax === '' || defaultsMax === Number.MAX_SAFE_INTEGER)) || \n                              (merchant.hasDefaults && (merchant.numberOfDefaults || 0) >= defaultsMin && (merchant.numberOfDefaults || 0) <= defaultsMax) ||\n                              (!filters.numberOfDefaultsMin && !filters.numberOfDefaultsMax); \n      \n      const matchesCreationDate = (!filters.creationDateStart || merchant.creationDate >= filters.creationDateStart) &&\n                                  (!filters.creationDateEnd || merchant.creationDate <= filters.creationDateEnd);\n      \n      const matchesDocStatus = filters.documentStatusFilter === 'all' || merchant.documentStatus === filters.documentStatusFilter;\n\n      return matchesSearch && matchesStatus && matchesCallbackDate && matchesFunding && matchesDefaults && matchesCreationDate && matchesDocStatus;\n    });\n  }, [merchants, filters]);\n\n  const handleOpenLogUpdateModal = (merchant: Merchant) => { setSelectedMerchantForLog(merchant); setIsLogUpdateModalOpen(true); };\n  const handleSaveLogUpdate = (merchantId: string, noteText: string, callbackDate?: string, callbackTime?: string, status?: LeadStatus) => {\n    if (!currentUser) return;\n    const merchant = merchants.find(m => m.id === merchantId);\n    if (!merchant) return;\n    let updatedMerchantData = { ...merchant };\n    if (noteText.trim()) {\n      const newNote: NoteEntry = { id: Date.now().toString(), timestamp: new Date().toISOString(), text: noteText.trim(), agentId: currentUser.id };\n      updatedMerchantData.notes = [newNote, ...(updatedMerchantData.notes || [])];\n    }\n    updatedMerchantData.callbackDate = callbackDate || undefined;\n    updatedMerchantData.callbackTime = callbackTime || undefined;\n    if (status) updatedMerchantData.status = status;\n    updateMerchant(updatedMerchantData);\n    setIsLogUpdateModalOpen(false);\n  };\n  const handleViewDetails = (merchantId: string) => navigate(`${ROUTES.MERCHANT_DETAIL.replace(':id', merchantId)}`);\n\n  const handlePipelineStatusUpdate = (merchantId: string, newStatus: LeadStatus) => {\n    const merchant = merchants.find(m => m.id === merchantId);\n    if (merchant) {\n      updateMerchant({ ...merchant, status: newStatus });\n    }\n  };\n\n  if (isLoading) return <div className=\"p-6 text-center text-gray-500\">Loading dashboard...</div>;\n  if (error) return <div className=\"p-6 text-center text-red-600\">Error: {error}</div>;\n\n  const statusFilterOptions = [{ value: 'all', label: 'All Lead Statuses' }, ...LEAD_STATUS_OPTIONS];\n  const documentStatusFilterOptions = [{ value: 'all' as const, label: 'All Document Statuses' }, ...DOCUMENT_STATUS_OPTIONS];\n\n\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Agent Dashboard</h1>\n        <div className=\"flex space-x-3\">\n           <Button variant=\"secondary\" size=\"md\" onClick={() => setIsQuickNoteModalOpen(true)}>\n            <PencilSquareIcon className=\"text-gray-700\"/> <span className=\"ml-2\">Quick Note</span>\n          </Button>\n          <Button variant=\"secondary\" size=\"md\" onClick={() => setShowFilters(!showFilters)}>\n            <FunnelIcon className=\"text-gray-700\"/> <span className=\"ml-2\">Filters</span>\n          </Button>\n          <Link to={ROUTES.ADD_MERCHANT}>\n            <Button variant=\"primary\" size=\"md\"><PlusIcon /> <span className=\"ml-2\">Add New Lead</span></Button>\n          </Link>\n        </div>\n      </div>\n\n      {showFilters && (\n        <div className=\"mb-8 p-4 bg-background rounded-lg shadow-md border border-border\">\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Global Filters</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 items-end\">\n            <Input name=\"searchTerm\" placeholder=\"Search name, business, email, location...\" value={filters.searchTerm} onChange={handleFilterChange} label=\"Global Search\"/>\n            <UiSelect name=\"status\" value={filters.status || 'all'} onChange={handleFilterChange} options={statusFilterOptions} label=\"Lead Status\"/>\n            <UiSelect name=\"documentStatusFilter\" value={filters.documentStatusFilter || 'all'} onChange={handleFilterChange} options={documentStatusFilterOptions} label=\"Document Status\"/>\n            <Input name=\"callbackDateStart\" type=\"date\" value={filters.callbackDateStart} onChange={handleFilterChange} label=\"Callback After\"/>\n            <Input name=\"callbackDateEnd\" type=\"date\" value={filters.callbackDateEnd} onChange={handleFilterChange} label=\"Callback Before\"/>\n            <Input name=\"fundingAmountMin\" type=\"number\" placeholder=\"Min Amount\" value={filters.fundingAmountMin} onChange={handleFilterChange} label=\"Funding Amount Min ($)\"/>\n            <Input name=\"fundingAmountMax\" type=\"number\" placeholder=\"Max Amount\" value={filters.fundingAmountMax} onChange={handleFilterChange} label=\"Funding Amount Max ($)\"/>\n            <Input name=\"numberOfDefaultsMin\" type=\"number\" placeholder=\"Min Defaults\" value={filters.numberOfDefaultsMin} onChange={handleFilterChange} label=\"Min Defaults\"/>\n            <Input name=\"numberOfDefaultsMax\" type=\"number\" placeholder=\"Max Defaults\" value={filters.numberOfDefaultsMax} onChange={handleFilterChange} label=\"Max Defaults\"/>\n            <Input name=\"creationDateStart\" type=\"date\" value={filters.creationDateStart} onChange={handleFilterChange} label=\"Lead Created After\"/>\n            <Input name=\"creationDateEnd\" type=\"date\" value={filters.creationDateEnd} onChange={handleFilterChange} label=\"Lead Created Before\"/>\n            <div className=\"md:col-span-1 flex items-end\"> \n               <Button onClick={clearFilters} variant=\"secondary\" className=\"w-full sm:w-auto\">Clear Filters</Button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-1 space-y-6\"><WidgetWrapper title=\"Next Callbacks\" icon={<CalendarDaysIcon className=\"text-gray-700\"/>} className=\"max-h-[500px] xl:max-h-[600px]\"><NextCallbacksWidget merchants={globallyFilteredMerchants} onOpenNoteModal={handleOpenLogUpdateModal} onViewDetails={handleViewDetails}/></WidgetWrapper></div>\n        <div className=\"lg:col-span-1 space-y-6\"><WidgetWrapper title=\"Pipeline Overview\" icon={<ListBulletIcon className=\"text-gray-700\"/>} className=\"max-h-[600px] xl:max-h-[700px]\"><PipelineOverviewWidget merchants={globallyFilteredMerchants} onUpdateMerchantStatus={handlePipelineStatusUpdate} onViewDetails={handleViewDetails}/></WidgetWrapper><WidgetWrapper title=\"Key Document Statuses\" icon={<DocumentCheckIcon className=\"text-gray-700\"/>} className=\"max-h-[400px] xl:max-h-[500px] mt-6\"><LeadsByDocStatusWidget merchants={globallyFilteredMerchants} onOpenNoteModal={handleOpenLogUpdateModal} onViewDetails={handleViewDetails}/></WidgetWrapper></div>\n        <div className=\"lg:col-span-1 space-y-6\"><WidgetWrapper title=\"High Priority Leads\" icon={<ArrowTrendingUpIcon className=\"text-gray-700\"/>} className=\"max-h-[calc(1000px-env(safe-area-inset-bottom))]"><HighPriorityLeadsWidget merchants={globallyFilteredMerchants} onOpenNoteModal={handleOpenLogUpdateModal} onViewDetails={handleViewDetails}/></WidgetWrapper></div>\n      </div>\n\n      <div className=\"mt-12\"><LeadTable merchants={globallyFilteredMerchants} onRowClick={handleViewDetails} /></div>\n      \n      {selectedMerchantForLog && (<QuickNoteModal isOpen={isLogUpdateModalOpen} onClose={() => setIsLogUpdateModalOpen(false)} merchant={selectedMerchantForLog} onSave={handleSaveLogUpdate}/>)}\n      <QuickNoteInputModal isOpen={isQuickNoteModalOpen} onClose={() => setIsQuickNoteModalOpen(false)} />\n    </div>\n  );\n};\n\ndeclare global { interface Window { tailwind: any; } }--- START OF FILE pages/MerchantDetailPage.tsx ---\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useMerchants } from '../hooks/useMerchants';\nimport { Merchant, NoteEntry } from '../types';\nimport { MerchantForm, MerchantFormData } from '../components/MerchantForm';\nimport { ROUTES } from '../constants';\nimport { Button } from '../components/ui/Button';\nimport { Modal } from '../components/ui/Modal';\nimport { useAuth } from '../contexts/AuthContext';\n\n\nexport const MerchantDetailPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const { getMerchantById, updateMerchant, deleteMerchant, isLoading: merchantsLoading, error: merchantsError } = useMerchants();\n  const [merchant, setMerchant] = useState<Merchant | undefined>(undefined);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  useEffect(() => {\n    if (!id) {\n      // console.log(\"MerchantDetailPage: No ID, navigating to dashboard.\");\n      navigate(ROUTES.DASHBOARD);\n      return;\n    }\n    const foundMerchant = getMerchantById(id);\n    if (foundMerchant) {\n      // Only update if it's a different merchant or merchant is not set yet\n      if (!merchant || merchant.id !== foundMerchant.id) {\n        // console.log(\"MerchantDetailPage: Found merchant, setting state:\", foundMerchant.id);\n        setMerchant(foundMerchant);\n      }\n    } else if (!merchantsLoading && id) {\n      // This means initial merchant list is loaded, but this specific one wasn't found.\n      // console.warn(`MerchantDetailPage: Merchant with id ${id} not found after global merchants loaded. Navigating to dashboard.`);\n      navigate(ROUTES.DASHBOARD);\n    }\n  }, [id, getMerchantById, navigate, merchantsLoading, merchant]);\n\n\n  const handleSubmit = (formData: MerchantFormData, newNoteText?: string) => {\n    if (!currentUser || !merchant) return; \n\n    let merchantDataForUpdate: Merchant = {\n        ...merchant, \n        ...formData,  \n    };\n\n    if (newNoteText && newNoteText.trim() !== \"\") {\n      const newNote: NoteEntry = {\n        id: Date.now().toString() + Math.random().toString().substring(2,8),\n        timestamp: new Date().toISOString(),\n        text: newNoteText.trim(),\n        agentId: currentUser.id,\n      };\n      merchantDataForUpdate.notes = [newNote, ...(merchantDataForUpdate.notes || [])];\n    }\n    \n    updateMerchant(merchantDataForUpdate);\n    navigate(ROUTES.DASHBOARD);\n  };\n  \n  const handleDelete = () => {\n    if (merchant) {\n      deleteMerchant(merchant.id);\n      navigate(ROUTES.DASHBOARD);\n      setShowDeleteModal(false);\n    }\n  };\n\n  // Render logic:\n  if (merchantsLoading && !merchant) {\n    // Still loading the main list of merchants AND we haven't identified our specific merchant yet.\n    return <div className=\"p-6 text-center text-gray-500\">Loading merchant details...</div>;\n  }\n\n  if (!id) { \n    // This should ideally be caught by useEffect earlier and navigate.\n    // If it reaches here, it's an unexpected state.\n    // console.log(\"MerchantDetailPage: Render - No ID, navigating.\");\n    // useEffect will handle navigation, but this is a fallback display.\n    return <div className=\"p-6 text-center text-gray-500\">Error: Merchant ID is missing. Redirecting...</div>;\n  }\n\n  if (merchantsError) { \n    return <div className=\"p-6 text-center text-red-600\">Error loading merchants: {merchantsError}</div>; \n  }\n\n  // At this point, merchantsLoading is false (or merchant is already found if loading was quick)\n  // and id is present and no error.\n  if (!merchant) {\n    // If merchantsLoading is false, id is present, no error, but merchant is STILL not set by the useEffect.\n    // This implies the useEffect concluded it's not found (and should have navigated) or is in an intermediate state.\n    // This message might appear briefly before navigation if the merchant is truly not found after load.\n    return <div className=\"p-6 text-center text-gray-500\">Finalizing merchant details or merchant not found. You may be redirected.</div>;\n  }\n\n  // If all checks pass, 'merchant' is available.\n  const pageTitle = \"Edit Lead Details\"; \n\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 pb-4 border-b border-gray-200\">\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">{pageTitle}</h1>\n        {merchant && ( \n            <Button variant=\"danger\" onClick={() => setShowDeleteModal(true)} className=\"mt-4 sm:mt-0\">\n                Delete Merchant\n            </Button>\n        )}\n      </div>\n      \n      <MerchantForm\n        initialData={merchant} \n        onSubmit={handleSubmit}\n      />\n\n      {merchant && (\n         <Modal\n            isOpen={showDeleteModal}\n            onClose={() => setShowDeleteModal(false)}\n            title={`Delete ${merchant.merchantName}?`}\n            footer={\n                <>\n                    <Button variant=\"secondary\" onClick={() => setShowDeleteModal(false)}>Cancel</Button>\n                    <Button variant=\"danger\" onClick={handleDelete} className=\"ml-3\">Confirm Delete</Button>\n                </>\n            }\n        >\n            <p className=\"text-sm text-gray-700\">Are you sure you want to delete this merchant? This action is permanent.</p>\n        </Modal>\n      )}\n    </div>\n  );\n};--- START OF FILE App.tsx ---\n\n\nimport React from 'react';\nimport { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { LoginPage } from './pages/LoginPage';\nimport { DashboardPage } from './pages/DashboardPage';\n// import { CreateMerchantPage } from './pages/CreateMerchantPage'; // Removed\nimport { MerchantDetailPage } from './pages/MerchantDetailPage';\nimport { AddLeadMerchantPage } from './pages/AddLeadMerchantPage'; \nimport { TestSupabasePage } from './pages/test-supabase';\nimport { Navbar } from './components/Navbar';\nimport { ProtectedRoute } from './components/ProtectedRoute';\nimport { ROUTES } from './constants';\n\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <HashRouter>\n        <div className=\"flex flex-col min-h-screen bg-gray-100\">\n          <Navbar />\n          <main className=\"flex-grow\">\n            <Routes>\n              <Route path=\"/test-supabase\" element={<TestSupabasePage />} />\n              <Route path={ROUTES.LOGIN} element={<LoginPage />} />\n              <Route element={<ProtectedRoute />}>\n                <Route path={ROUTES.DASHBOARD} element={<DashboardPage />} />\n                {/* <Route path={ROUTES.CREATE_MERCHANT} element={<CreateMerchantPage />} /> Removed */}\n                <Route path={ROUTES.ADD_MERCHANT} element={<AddLeadMerchantPage />} /> {/* Updated route */}\n                <Route path={ROUTES.MERCHANT_DETAIL} element={<MerchantDetailPage />} />\n              </Route>\n              {/* Fallback route: redirects to Dashboard if no other route matches */}\n              <Route path=\"*\" element={<Navigate to={ROUTES.DASHBOARD} replace />} />\n            </Routes>\n          </main>\n          <footer className=\"bg-white text-center p-4 text-sm text-gray-500 border-t border-gray-200\">\n            © {new Date().getFullYear()} Sales CRM. All rights reserved.\n          </footer>\n        </div>\n      </HashRouter>\n    </AuthProvider>\n  );\n};\n\nexport default App;--- START OF FILE pages/AddMerchantPage.tsx ------ START OF FILE pages/CreateMerchantPage.tsx ------ START OF FILE pages/AddLeadMerchantPage.tsx ---\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useMerchants } from '../hooks/useMerchants';\nimport { useQuickNotes } from '../hooks/useQuickNotes'; \nimport { Input } from '../components/ui/Input';\nimport { Button } from '../components/ui/Button';\nimport { ROUTES, LEAD_STATUS_OPTIONS, DOCUMENT_STATUS_OPTIONS, DOCUMENT_TYPE_OPTIONS } from '../constants';\nimport { useAuth } from '../contexts/AuthContext';\nimport { LeadStatus, Merchant, DocumentStatusType, DocumentTypeType } from '../types';\nimport { Checkbox } from '../components/ui/Checkbox';\nimport { Textarea } from '../components/ui/Textarea';\nimport { Select } from '../components/ui/Select';\n\ninterface LocationState {\n  quickNoteText?: string;\n  quickNoteId?: string;\n}\n\nexport const AddLeadMerchantPage: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { addMerchant, isLoading } = useMerchants();\n  const { updateQuickNoteStatus } = useQuickNotes(); \n  const { currentUser } = useAuth();\n\n  const locationState = location.state as LocationState | null;\n  \n  // Lead Information\n  const [merchantName, setMerchantName] = useState('');\n  const [businessName, setBusinessName] = useState('');\n  const [status, setStatus] = useState<LeadStatus>('Needs follow-up');\n  const [mainPhoneNumber, setMainPhoneNumber] = useState('');\n  const [secondaryPhoneNumber, setSecondaryPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [locationText, setLocationText] = useState(''); \n\n  // Funding & Financials\n  const [amountLookingFor, setAmountLookingFor] = useState('0');\n  const [monthlyRevenue, setMonthlyRevenue] = useState('0');\n  const [numberOfPositions, setNumberOfPositions] = useState('0');\n  const [positionBalances, setPositionBalances] = useState('');\n  \n  // Defaults\n  const [hasDefaults, setHasDefaults] = useState(false);\n  const [numberOfDefaults, setNumberOfDefaults] = useState('');\n  const [defaultsDescription, setDefaultsDescription] = useState('');\n\n  // Callback\n  const [callbackDate, setCallbackDate] = useState('');\n  const [callbackTime, setCallbackTime] = useState('');\n\n  // New Document Fields\n  const [documentStatus, setDocumentStatus] = useState<DocumentStatusType>('No Documents Received');\n  const [documentType, setDocumentType] = useState<DocumentTypeType>('Bank Statements');\n  const [documentNotes, setDocumentNotes] = useState('');\n  \n  // Notes\n  const [initialNote, setInitialNote] = useState('');\n  \n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (locationState?.quickNoteText) {\n      setInitialNote(locationState.quickNoteText);\n    }\n  }, [locationState]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!currentUser) {\n      setError(\"User not authenticated.\");\n      return;\n    }\n    if (!merchantName.trim()) { setError(\"Merchant name cannot be empty.\"); return; }\n    if (!mainPhoneNumber.trim()) { setError(\"Main phone number cannot be empty.\"); return; }\n    if (!email.trim()) { setError(\"Email cannot be empty.\"); return; }\n    if (!/\\S+@\\S+\\.\\S+/.test(email)) { setError(\"Please enter a valid email address.\"); return; }\n    if (!locationText.trim()) { setError(\"Location cannot be empty.\"); return; }\n\n    const parsedAmountLookingFor = parseFloat(amountLookingFor);\n    if (isNaN(parsedAmountLookingFor) || parsedAmountLookingFor < 0) { setError(\"Amount Looking For must be a valid positive number.\"); return; }\n    \n    const parsedMonthlyRevenue = parseFloat(monthlyRevenue);\n    \n    const parsedNumberOfPositions = parseInt(numberOfPositions, 10);\n    if (isNaN(parsedNumberOfPositions) || parsedNumberOfPositions < 0) { setError(\"Number of Positions must be a valid positive integer.\"); return; }\n    \n    if (!positionBalances.trim()) { setError(\"Position Balances cannot be empty.\"); return; }\n\n    let parsedNumberOfDefaults: number | undefined = undefined;\n    if (hasDefaults) {\n        if (!numberOfDefaults.trim()) { setError(\"Number of defaults is required if 'Has Defaults' is Yes.\"); return;}\n        parsedNumberOfDefaults = parseInt(numberOfDefaults, 10);\n        if (isNaN(parsedNumberOfDefaults) || parsedNumberOfDefaults <= 0) { setError(\"Number of defaults must be a positive integer.\"); return; }\n        if (!defaultsDescription.trim()) { setError(\"Defaults description is required if 'Has Defaults' is Yes.\"); return; }\n    }\n\n    setError('');\n\n    const merchantPayload: Omit<Merchant, 'id' | 'agentId' | 'notes'> & { latestNotes?: string } = {\n      merchantName: merchantName.trim(),\n      businessName: businessName.trim(),\n      status: status,\n      mainPhoneNumber: mainPhoneNumber.trim(),\n      secondaryPhoneNumber: secondaryPhoneNumber.trim() || undefined,\n      email: email.trim(),\n      location: locationText.trim(),\n      creationDate: new Date().toISOString().split('T')[0],\n      monthlyRevenue: isNaN(parsedMonthlyRevenue) ? 0 : parsedMonthlyRevenue,\n      \n      amountLookingFor: parsedAmountLookingFor,\n      numberOfPositions: parsedNumberOfPositions,\n      positionBalances: positionBalances.trim(),\n      \n      hasDefaults: hasDefaults,\n      numberOfDefaults: parsedNumberOfDefaults,\n      defaultsDescription: hasDefaults ? defaultsDescription.trim() : undefined,\n\n      callbackDate: callbackDate || undefined,\n      callbackTime: callbackTime || undefined,\n      \n      documentStatus: documentStatus,\n      documentType: documentType,\n      documentNotes: documentNotes.trim() || undefined,\n      \n      latestNotes: initialNote.trim() || undefined,\n    };\n\n    const newMerchant = await addMerchant(merchantPayload);\n    if (newMerchant && newMerchant.id) { // Check for newMerchant and newMerchant.id\n      if (locationState?.quickNoteId) {\n        updateQuickNoteStatus(locationState.quickNoteId, 'converted', newMerchant.id);\n      }\n      navigate(ROUTES.DASHBOARD);\n    } else {\n      setError(\"Failed to add lead. Please try again.\");\n    }\n  };\n\n  const formSectionTitleClass = \"text-xl font-semibold text-gray-800 pt-4 pb-1 border-b border-gray-300\";\n\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-2xl mx-auto bg-background p-6 sm:p-8 rounded-lg shadow-xl border border-border\">\n        <div className=\"mb-6 pb-4 border-b border-gray-300\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Add New Lead</h1>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {error && <p className=\"text-red-600 text-sm text-center bg-red-100 p-3 rounded-md border border-red-300\">{error}</p>}\n          \n          <h2 className={formSectionTitleClass}>Lead Information</h2>\n          <Input label=\"Merchant Name *\" id=\"merchantName\" name=\"merchantName\" value={merchantName} onChange={(e) => setMerchantName(e.target.value)} required autoFocus />\n          <Input label=\"Business Name (Optional)\" id=\"businessName\" name=\"businessName\" value={businessName} onChange={(e) => setBusinessName(e.target.value)} />\n          <Select label=\"Status *\" id=\"status\" name=\"status\" value={status} onChange={(e) => setStatus(e.target.value as LeadStatus)} options={LEAD_STATUS_OPTIONS.map(opt => ({ value: opt.value, label: opt.label }))} required />\n          <Input label=\"Main Phone Number *\" id=\"mainPhoneNumber\" name=\"mainPhoneNumber\" type=\"tel\" value={mainPhoneNumber} onChange={(e) => setMainPhoneNumber(e.target.value)} required />\n          <Input label=\"Secondary Phone (Optional)\" id=\"secondaryPhoneNumber\" name=\"secondaryPhoneNumber\" type=\"tel\" value={secondaryPhoneNumber} onChange={(e) => setSecondaryPhoneNumber(e.target.value)} />\n          <Input label=\"Email *\" id=\"email\" name=\"email\" type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n          <Input label=\"Location (City, State) *\" id=\"locationText\" name=\"locationText\" value={locationText} onChange={(e) => setLocationText(e.target.value)} required />\n\n          <h2 className={formSectionTitleClass}>Funding & Financials</h2>\n          <Input label=\"Amount Looking For ($) *\" id=\"amountLookingFor\" name=\"amountLookingFor\" type=\"number\" value={amountLookingFor} onChange={(e) => setAmountLookingFor(e.target.value)} required min=\"0\" />\n          <Input label=\"Monthly Revenue ($) (Optional)\" id=\"monthlyRevenue\" name=\"monthlyRevenue\" type=\"number\" value={monthlyRevenue} onChange={(e) => setMonthlyRevenue(e.target.value)} min=\"0\" />\n          <Input label=\"Number of Positions *\" id=\"numberOfPositions\" name=\"numberOfPositions\" type=\"number\" value={numberOfPositions} onChange={(e) => setNumberOfPositions(e.target.value)} required min=\"0\" step=\"1\" />\n          <Input label=\"Position Balances *\" id=\"positionBalances\" name=\"positionBalances\" value={positionBalances} onChange={(e) => setPositionBalances(e.target.value)} required />\n          \n          <h2 className={formSectionTitleClass}>Defaults</h2>\n          <Checkbox label=\"Has Defaults?\" id=\"hasDefaults\" name=\"hasDefaults\" checked={hasDefaults} onChange={(e) => setHasDefaults(e.target.checked)} />\n          {hasDefaults && (\n            <>\n              <Input label=\"How many defaults? *\" id=\"numberOfDefaults\" name=\"numberOfDefaults\" type=\"number\" value={numberOfDefaults} onChange={(e) => setNumberOfDefaults(e.target.value)} required min=\"1\" step=\"1\" />\n              <Textarea label=\"Defaults Description *\" id=\"defaultsDescription\" name=\"defaultsDescription\" value={defaultsDescription} onChange={(e) => setDefaultsDescription(e.target.value)} required />\n            </>\n          )}\n\n          <h2 className={formSectionTitleClass}>Callback</h2>\n          <Input label=\"Callback Date (Optional)\" id=\"callbackDate\" name=\"callbackDate\" type=\"date\" value={callbackDate} onChange={(e) => setCallbackDate(e.target.value)} />\n          <Input label=\"Callback Time (Optional)\" id=\"callbackTime\" name=\"callbackTime\" type=\"time\" value={callbackTime} onChange={(e) => setCallbackTime(e.target.value)} />\n\n          <h2 className={formSectionTitleClass}>Document Management</h2>\n          <Select \n            label=\"Document Status *\" \n            id=\"documentStatus\" \n            name=\"documentStatus\" \n            value={documentStatus} \n            onChange={(e) => setDocumentStatus(e.target.value as DocumentStatusType)} \n            options={DOCUMENT_STATUS_OPTIONS} \n            required \n          />\n          <Select \n            label=\"Primary Document Type *\" \n            id=\"documentType\" \n            name=\"documentType\" \n            value={documentType} \n            onChange={(e) => setDocumentType(e.target.value as DocumentTypeType)} \n            options={DOCUMENT_TYPE_OPTIONS} \n            required \n          />\n          <Textarea \n            label=\"Document Notes (Optional)\" \n            id=\"documentNotes\" \n            name=\"documentNotes\" \n            value={documentNotes} \n            onChange={(e) => setDocumentNotes(e.target.value)}\n            placeholder=\"e.g., Client to send 3 months of bank statements by EOD.\" \n          />\n          \n          <h2 className={formSectionTitleClass}>Notes</h2>\n          <Textarea label=\"Initial Note (Optional)\" id=\"initialNote\" name=\"initialNote\" value={initialNote} onChange={(e) => setInitialNote(e.target.value)} />\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(ROUTES.DASHBOARD)}>Cancel</Button>\n            <Button type=\"submit\" variant=\"primary\" isLoading={isLoading}>Save Lead</Button>\n          </div>\n        </form>\n        {isLoading && <div className=\"text-center mt-4 p-4 bg-primary-50 text-primary-700 rounded-md\">Adding lead...</div>}\n      </div>\n    </div>\n  );\n};--- START OF FILE hooks/useQuickNotes.tsx ---\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { QuickNote } from '../types';\nimport { useAuth } from '../contexts/AuthContext';\n// import { LOCAL_STORAGE_KEYS } from '../constants'; // Removed\nimport { supabase } from '../lib/supabaseClient'; // Added\n\nexport const useQuickNotes = () => {\n  const { currentUser } = useAuth();\n  const [quickNotes, setQuickNotes] = useState<QuickNote[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchQuickNotes = useCallback(async () => {\n    if (!currentUser) {\n      setQuickNotes([]);\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('quick_notes')\n        .select('*')\n        .eq('agentId', currentUser.id)\n        .order('createdAt', { ascending: false });\n\n      if (supabaseError) throw supabaseError;\n      setQuickNotes(data as QuickNote[]);\n    } catch (e: any) {\n      console.error(\"Failed to load quick notes from Supabase\", e);\n      setError(`Failed to load quick notes: ${e.message}`);\n      setQuickNotes([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser]);\n  \n  useEffect(() => {\n    fetchQuickNotes();\n  }, [fetchQuickNotes]);\n\n  const addQuickNote = useCallback(async (text: string) => {\n    if (!currentUser || !text.trim()) {\n      setError(\"User not authenticated or text is empty.\");\n      return undefined;\n    }\n    setIsLoading(true);\n    setError(null);\n    const noteToInsert = {\n      agentId: currentUser.id,\n      text: text.trim(),\n      createdAt: new Date().toISOString(),\n      status: 'pending' as QuickNote['status'],\n    };\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('quick_notes')\n        .insert([noteToInsert])\n        .select();\n      \n      if (supabaseError) throw supabaseError;\n\n      if (data && data.length > 0) {\n        const newQuickNote = data[0] as QuickNote;\n        setQuickNotes(prev => [newQuickNote, ...prev]); // Add to start for chronological view if sorted by new\n        setIsLoading(false);\n        return newQuickNote;\n      }\n      setIsLoading(false);\n      return undefined;\n    } catch (e: any) {\n      console.error(\"Failed to save quick note to Supabase\", e);\n      setError(`Failed to save quick note: ${e.message}`);\n      setIsLoading(false);\n      return undefined;\n    }\n  }, [currentUser, setIsLoading, setError, setQuickNotes]);\n\n  const updateQuickNoteStatus = useCallback(async (id: string, status: QuickNote['status'], convertedLeadId?: string) => {\n    if (!currentUser) {\n      setError(\"User not authenticated to update quick note.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('quick_notes')\n        .update({ status, convertedLeadId: status === 'converted' ? convertedLeadId : null })\n        .eq('id', id)\n        .eq('agentId', currentUser.id)\n        .select();\n\n      if (supabaseError) throw supabaseError;\n\n      if (data && data.length > 0) {\n        const updatedNote = data[0] as QuickNote;\n        setQuickNotes(prev => prev.map(qn => qn.id === updatedNote.id ? updatedNote : qn));\n      }\n    } catch (e: any) {\n      console.error(\"Failed to update quick note status in Supabase\", e);\n      setError(`Failed to update quick note status: ${e.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser, setIsLoading, setError, setQuickNotes]);\n  \n  const deleteQuickNote = useCallback(async (id: string) => {\n    if (!currentUser) {\n      setError(\"User not authenticated to delete quick note.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const { error: supabaseError } = await supabase\n        .from('quick_notes')\n        .delete()\n        .eq('id', id)\n        .eq('agentId', currentUser.id);\n\n      if (supabaseError) throw supabaseError;\n      setQuickNotes(prev => prev.filter(qn => qn.id !== id));\n    } catch (e: any) {\n      console.error(\"Failed to delete quick note from Supabase\", e);\n      setError(`Failed to delete quick note: ${e.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser, setIsLoading, setError, setQuickNotes]);\n\n  const editQuickNote = useCallback(async (id: string, newText: string) => {\n    if (!currentUser || !newText.trim()) {\n      setError(\"User not authenticated or text is empty.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const { data, error: supabaseError } = await supabase\n        .from('quick_notes')\n        .update({ text: newText.trim(), status: 'pending' as QuickNote['status'] }) // Reset status to pending on edit\n        .eq('id', id)\n        .eq('agentId', currentUser.id)\n        .select();\n      \n      if (supabaseError) throw supabaseError;\n\n      if (data && data.length > 0) {\n        const editedNote = data[0] as QuickNote;\n        setQuickNotes(prev => prev.map(qn => qn.id === editedNote.id ? editedNote : qn));\n      }\n    } catch (e: any) {\n      console.error(\"Failed to edit quick note in Supabase\", e);\n      setError(`Failed to edit quick note: ${e.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUser, setIsLoading, setError, setQuickNotes]);\n\n  return {\n    quickNotes,\n    addQuickNote,\n    updateQuickNoteStatus,\n    deleteQuickNote,\n    editQuickNote,\n    isLoading,\n    error,\n    setError,\n    fetchQuickNotes, // Expose for manual refresh\n  };\n};--- START OF FILE components/QuickNoteInputModal.tsx ---\n\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Modal } from './ui/Modal';\nimport { Textarea } from './ui/Textarea';\nimport { Button } from './ui/Button';\nimport { useQuickNotes } from '../hooks/useQuickNotes';\nimport { QuickNote } from '../types';\nimport { EditQuickNoteModal } from './EditQuickNoteModal';\nimport { ROUTES } from '../constants';\n\nconst TrashIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-4 h-4 ${className || 'text-red-500 hover:text-red-700'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12.56 0c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" /></svg>;\nconst ArrowPathIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-4 h-4 ${className || 'text-primary-700 hover:text-primary-900'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M16.023 9.348h4.992v-.001a.75.75 0 0 1 .75.75c0 .414-.336.75-.75.75h-4.992v5.04a.75.75 0 0 1-1.5 0v-5.04h-4.992a.75.75 0 0 1 0-1.5h4.992v-5.04a.75.75 0 0 1 1.5 0v5.04Z\" /></svg>;\nconst PencilIcon: React.FC<{className?: string}> = ({className}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className={`w-4 h-4 ${className || 'text-gray-600 hover:text-gray-800'}`}><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125\" /></svg>;\n\ninterface QuickNoteInputModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const QuickNoteInputModal: React.FC<QuickNoteInputModalProps> = ({ isOpen, onClose }) => {\n  const { quickNotes, addQuickNote, deleteQuickNote, editQuickNote, isLoading, error } = useQuickNotes();\n  const navigate = useNavigate();\n  const [newNoteText, setNewNoteText] = useState('');\n  \n  const [showEditQuickNoteModal, setShowEditQuickNoteModal] = useState(false);\n  const [selectedQuickNoteForEdit, setSelectedQuickNoteForEdit] = useState<QuickNote | null>(null);\n\n\n  const handleSaveQuickNote = () => {\n    if (newNoteText.trim()) {\n      addQuickNote(newNoteText);\n      setNewNoteText(''); \n    }\n  };\n  \n  const openEditModal = (note: QuickNote) => {\n    setSelectedQuickNoteForEdit(note);\n    setShowEditQuickNoteModal(true);\n  };\n\n  const closeEditModal = () => {\n    setSelectedQuickNoteForEdit(null);\n    setShowEditQuickNoteModal(false);\n  };\n\n  const handleSaveEditedNote = (id: string, text: string) => {\n    editQuickNote(id, text);\n  };\n\n  const handleConvertToLead = (note: QuickNote) => {\n    navigate(ROUTES.ADD_MERCHANT, { \n      state: { \n        quickNoteText: note.text,\n        quickNoteId: note.id \n      } \n    });\n    onClose(); // Close the quick note modal after navigating\n  };\n\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} title=\"Quick Notes\" size=\"xl\">\n        <div className=\"space-y-4\">\n          <Textarea\n            label=\"New Quick Note\"\n            value={newNoteText}\n            onChange={(e) => setNewNoteText(e.target.value)}\n            placeholder=\"Jot down quick notes here... Texas, $50K, 2 defaults, callback tomorrow...\"\n            rows={3}\n          />\n          <Button onClick={handleSaveQuickNote} isLoading={isLoading} disabled={!newNoteText.trim()}>\n            Save Quick Note\n          </Button>\n          {error && <p className=\"text-sm text-red-600\">{error}</p>}\n\n          <div className=\"mt-6\">\n            <h3 className=\"text-md font-semibold text-gray-800 mb-2\">Pending Quick Notes</h3>\n            {isLoading && quickNotes.length === 0 && <p className=\"text-sm text-gray-500\">Loading notes...</p>}\n            {!isLoading && quickNotes.filter(qn => qn.status === 'pending').length === 0 && <p className=\"text-sm text-gray-500\">No pending quick notes.</p>}\n            \n            <div className=\"space-y-3 max-h-60 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n              {quickNotes.filter(qn => qn.status === 'pending').sort((a,b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).map((note) => (\n                <div key={note.id} className=\"p-3 bg-gray-50 rounded-md border border-gray-200 shadow-sm\">\n                  <p className=\"text-sm text-gray-700 whitespace-pre-wrap\">{note.text}</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    {new Date(note.createdAt).toLocaleString()}\n                  </p>\n                  <div className=\"mt-2 flex justify-end space-x-2\">\n                    <Button size=\"sm\" variant=\"ghost\" onClick={() => openEditModal(note)} aria-label=\"Edit note\">\n                        <PencilIcon />\n                    </Button>\n                    <Button size=\"sm\" variant=\"ghost\" onClick={() => deleteQuickNote(note.id)} aria-label=\"Delete note\">\n                      <TrashIcon />\n                    </Button>\n                    <Button size=\"sm\" variant=\"primary\" onClick={() => handleConvertToLead(note)} aria-label=\"Convert to Lead\">\n                      <ArrowPathIcon className=\"text-white\"/> <span className=\"ml-1\">Convert to Lead</span>\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Modal>\n      \n      {selectedQuickNoteForEdit && (\n        <EditQuickNoteModal\n            isOpen={showEditQuickNoteModal}\n            onClose={closeEditModal}\n            quickNoteToEdit={selectedQuickNoteForEdit}\n            onSaveChanges={handleSaveEditedNote}\n        />\n      )}\n    </>\n  );\n};--- START OF FILE components/ConvertQuickNoteToLeadModal.tsx ---\n\n// This file is no longer needed as AI parsing and the specific conversion modal are removed.\n// The conversion process is now handled by navigating to AddLeadMerchantPage\n// with the quick note text passed in the route state.--- START OF FILE services/aiLeadParsingService.ts ---\n\n// This file is no longer needed as AI parsing functionality is being removed.\n// All quick note to lead conversion will be manual.--- START OF FILE hooks/useAiFailedCallLogger.tsx ---\n\n// This file is no longer needed as AI functionality and its error logging are being removed.--- START OF FILE components/EditQuickNoteModal.tsx ---\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Modal } from './ui/Modal';\nimport { Textarea } from './ui/Textarea';\nimport { Button } from './ui/Button';\nimport { QuickNote } from '../types';\nimport { useQuickNotes } from '../hooks/useQuickNotes';\n\ninterface EditQuickNoteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  quickNoteToEdit: QuickNote;\n  onSaveChanges: (id: string, newText: string) => void;\n}\n\nexport const EditQuickNoteModal: React.FC<EditQuickNoteModalProps> = ({ \n    isOpen, \n    onClose, \n    quickNoteToEdit,\n    onSaveChanges,\n}) => {\n  const [editedText, setEditedText] = useState('');\n  const { isLoading } = useQuickNotes(); \n\n  useEffect(() => {\n    if (quickNoteToEdit && isOpen) {\n      setEditedText(quickNoteToEdit.text);\n    }\n  }, [quickNoteToEdit, isOpen]);\n\n  const handleSaveChangesClick = () => {\n    if (editedText.trim() && quickNoteToEdit) {\n      onSaveChanges(quickNoteToEdit.id, editedText);\n      onClose();\n    }\n  };\n\n  if (!quickNoteToEdit) return null;\n\n  return (\n    <Modal \n        isOpen={isOpen} \n        onClose={onClose} \n        title={`Edit Quick Note`} \n        size=\"lg\"\n        footer={\n            <div className=\"w-full flex justify-end space-x-3\">\n                <Button variant=\"secondary\" onClick={onClose}>Cancel</Button>\n                <Button onClick={handleSaveChangesClick} isLoading={isLoading} disabled={!editedText.trim()}>Save Changes</Button>\n            </div>\n        }\n    >\n      <div className=\"space-y-4\">\n        <Textarea\n          label=\"Note Text\"\n          value={editedText}\n          onChange={(e) => setEditedText(e.target.value)}\n          placeholder=\"Edit your quick note...\"\n          rows={5}\n          autoFocus\n        />\n         <p className=\"text-xs text-gray-500\">Original creation date: {new Date(quickNoteToEdit.createdAt).toLocaleString()}</p>\n      </div>\n    </Modal>\n  );\n};--- START OF FILE lib/supabaseClient.ts ---\n\n\nimport { createClient, User } from '@supabase/supabase-js';\nimport { User as AppUser } from '../types'; // Import your app's User type\n\n// Read from environment variables. If they are not set (e.g., in local development),\n// use non-functional, but syntactically valid, placeholders. This allows the \n// application to load without crashing and avoids console errors.\n// The developer must set the actual environment variables in their deployment\n// environment (like Vercel) for Supabase functionality to work.\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://example.supabase.co';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport const mapSupabaseUserToAppUser = (supabaseUser: User | null): AppUser | null => {\n  if (!supabaseUser) return null;\n  return {\n    id: supabaseUser.id,\n    username: supabaseUser.email || '', // Using email as username\n  };\n};--- START OF FILE pages/test-supabase.tsx ---\n\n\nimport React, { useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabaseClient';\nimport { User } from '@supabase/supabase-js';\n\nexport const TestSupabasePage: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const getUser = async () => {\n      try {\n        const {\n          data: { user: supabaseUser },\n          error: getUserError,\n        } = await supabase.auth.getUser();\n\n        if (getUserError) {\n          throw getUserError;\n        }\n        \n        setUser(supabaseUser);\n\n      } catch (err: any) {\n        setError(err.message || 'An unexpected error occurred.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getUser();\n  }, []);\n\n  const renderContent = () => {\n    if (loading) {\n        return <p className=\"text-gray-500\">Loading...</p>;\n    }\n    if (error) {\n        return <p className=\"text-red-500 font-semibold\">Error: {error}</p>;\n    }\n    if (user) {\n        return (\n            <div>\n              <p className=\"text-green-600 font-semibold\">✅ Connected. You are logged in as:</p>\n              <pre className=\"mt-2 bg-gray-100 p-4 rounded text-sm overflow-auto\">{JSON.stringify(user, null, 2)}</pre>\n            </div>\n        );\n    }\n    return <p className=\"font-semibold\">No active user session found.</p>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n      <div className=\"bg-white p-6 rounded-lg shadow-xl border border-border\">\n        <h1 className=\"text-2xl font-bold mb-4 text-gray-800 border-b pb-2\">Supabase Connection Test</h1>\n        <div className=\"mt-4\">\n            {renderContent()}\n        </div>\n      </div>\n    </div>\n  );\n};Minor Corrections / Suggestions\n1. REACT_APP_ Prefix (Vercel)\nIn Vercel, the correct env vars must be prefixed with NEXT_PUBLIC_ (for Next.js) — not REACT_APP_.\n\n🔁 So change:\n\nWrong\tCorrect\nREACT_APP_SUPABASE_URL\tNEXT_PUBLIC_SUPABASE_URL\nREACT_APP_SUPABASE_ANON_KEY\tNEXT_PUBLIC_SUPABASE_ANON_KEY\n\nREACT_APP_ is for Create React App. You're using Next.js (React via Vercel), so the correct prefix is NEXT_PUBLIC_.\n\n2. Move Auth Logic from Context (optional)\nIf you're using AuthContext.tsx to listen to onAuthStateChange, that’s good, but make sure you’re:\n\nStoring the user in state\n\nMaking the context available globally via <AuthProvider>\n\nIf you’re using client-side auth + SSR (server-side rendering), you’ll need cookies or supabase.auth.getSession() in getServerSideProps. Let me know if you need help there.\n\n3. Add a Supabase Row-Level Logging Helper\nThis is optional, but powerful.\n\nIn Supabase SQL editor:\n\nsql\nCopy\nEdit\ncreate extension if not exists pg_stat_statements;\nThen you can track queries and troubleshoot what’s getting blocked. Combine this with:\n\nsql\nCopy\nEdit\nselect * from pg_stat_statements\norder by total_time desc\nlimit 10;"
}]}